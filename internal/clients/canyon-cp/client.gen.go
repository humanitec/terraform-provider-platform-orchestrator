// Package canyoncp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package canyoncp

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	UserIdHeaderScopes = "userIdHeader.Scopes"
)

// Defines values for EnvironmentStatus.
const (
	EnvironmentStatusActive       EnvironmentStatus = "active"
	EnvironmentStatusDeleteFailed EnvironmentStatus = "delete_failed"
	EnvironmentStatusDeleting     EnvironmentStatus = "deleting"
)

// Defines values for ProjectStatus.
const (
	ProjectStatusActive   ProjectStatus = "active"
	ProjectStatusDeleting ProjectStatus = "deleting"
)

// Defines values for RunnerType.
const (
	RunnerTypeKubernetes       RunnerType = "kubernetes"
	RunnerTypeKubernetesGke    RunnerType = "kubernetes-gke"
	RunnerTypeRemoteKubernetes RunnerType = "remote-kubernetes"
)

// Defines values for StateStorageType.
const (
	StateStorageTypeKubernetes StateStorageType = "kubernetes"
)

// AvailableResourceType A page of available resource types returned from the list api.
type AvailableResourceType struct {
	// Description Resource type description
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the resource type
	Id string `json:"id"`

	// Options A list of available options for the resource type
	Options []AvailableResourceTypeOption `json:"options"`

	// OutputSchema The schema for output parameters of the resource type
	OutputSchema map[string]interface{} `json:"output_schema"`
}

// AvailableResourceTypeOption defines model for AvailableResourceTypeOption.
type AvailableResourceTypeOption struct {
	// ModuleId The unique identifier for the module that this option belongs to
	ModuleId string `json:"module_id"`

	// ResourceClass The class of the resource, which can be used to categorize it
	ResourceClass string `json:"resource_class"`

	// ResourceId The unique identifier for the resource type
	ResourceId *string `json:"resource_id,omitempty"`

	// RuleId The unique identifier for the rule that this option belongs to
	RuleId string `json:"rule_id"`
}

// AvailableResourceTypePage A page of available resource types returned from the list api.
type AvailableResourceTypePage struct {
	// Items The items in this page
	Items []AvailableResourceType `json:"items"`

	// NextPageToken The page token to use to request the next page of items
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// ConfigurationSecret Secret path and version of a secret stored in the internal store.
type ConfigurationSecret struct {
	// Path Path where the secret is stored
	Path string `json:"path"`

	// Version The version of the secret
	Version int `json:"version"`
}

// Environment An environment.
type Environment struct {
	// CreatedAt The date and time when the resource type was created
	CreatedAt time.Time `json:"created_at"`

	// DisplayName Environment human readable name
	DisplayName string `json:"display_name"`

	// EnvTypeId The environment type for the environment.
	EnvTypeId string `json:"env_type_id"`

	// Id Environment identifier
	Id string `json:"id"`

	// ProjectId Project identifier
	ProjectId string `json:"project_id"`

	// RunnerId The id of the runner to be used to deploy this environment.
	RunnerId string `json:"runner_id"`

	// Status The status of the environment. Environments are normally active unless they have been deleted. A delete_failed status indicates that the destroy failed and a delete can be re-issued.
	Status EnvironmentStatus `json:"status"`

	// StatusMessage An optional message associated with the status.
	StatusMessage *string `json:"status_message,omitempty"`

	// UpdatedAt The date and time when the environment was updated.
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique uid for the environment to identify a unique lifecycle
	Uuid openapi_types.UUID `json:"uuid"`
}

// EnvironmentCreateBody A request to create a new environment.
type EnvironmentCreateBody struct {
	// DisplayName Environment human readable name. The id is used if this is not specified.
	DisplayName *string `json:"display_name,omitempty"`

	// EnvTypeId The environment type for the new environment. This environment type must exist in the org.
	EnvTypeId string `json:"env_type_id"`

	// Id Environment identifier
	Id string `json:"id"`
}

// EnvironmentInternalUpdateBody defines model for EnvironmentInternalUpdateBody.
type EnvironmentInternalUpdateBody struct {
	// Status The status of the environment. Environments are normally active unless they have been deleted. A delete_failed status indicates that the destroy failed and a delete can be re-issued.
	Status        *EnvironmentStatus `json:"status,omitempty"`
	StatusMessage *string            `json:"status_message,omitempty"`
}

// EnvironmentPage A page of environments returned from the list api.
type EnvironmentPage struct {
	// Items The items in this page
	Items []Environment `json:"items"`

	// NextPageToken The page token to use to request the next page of items
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// EnvironmentStatus The status of the environment. Environments are normally active unless they have been deleted. A delete_failed status indicates that the destroy failed and a delete can be re-issued.
type EnvironmentStatus string

// EnvironmentType Summary of an environment type in the org.
type EnvironmentType = EnvironmentTypeSummary

// EnvironmentTypeCreateBody A request to create a new environment type in the org.
type EnvironmentTypeCreateBody struct {
	// DisplayName Human readable name for the environment type. This will be generated if not provided.
	DisplayName *string `json:"display_name,omitempty"`

	// Id Environment type identifier
	Id string `json:"id"`
}

// EnvironmentTypePage A page of environment types returned from the list api.
type EnvironmentTypePage struct {
	// Items The items in this page
	Items []EnvironmentTypeSummary `json:"items"`

	// NextPageToken The page token to use to request the next page of items
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// EnvironmentTypeSummary Summary of an environment type in the org.
type EnvironmentTypeSummary struct {
	// CreatedAt The date and time when the environment type was created
	CreatedAt time.Time `json:"created_at"`

	// DisplayName Human readable name for the environment type
	DisplayName string `json:"display_name"`

	// Id The unique id of the environment type in this org.
	Id string `json:"id"`

	// Uuid Unique uid for the environment type to identify a unique lifecycle
	Uuid openapi_types.UUID `json:"uuid"`
}

// Error A standard error response
type Error struct {
	// Details An optional payload of metadata associated with the error.
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error A short code representing the class of error. This code can be used for tracking and observability or to
	// find appropriate troubleshooting documentation.
	Error string `json:"error"`

	// Message A human-readable explanation of the error.
	Message string `json:"message"`
}

// InternalModuleCatalogue A collation of all the applicable modules, and providers for an environment. A module is applicable if there is at least one rule for it that matches the requested environment.
type InternalModuleCatalogue struct {
	Modules   []InternalModuleCatalogueModule `json:"modules"`
	Providers []ModuleProvider                `json:"providers"`
}

// InternalModuleCatalogueGenerateBody The request contents to generate a module catalogue
type InternalModuleCatalogueGenerateBody struct {
	// AreRulesIgnored When running a destroy deployment, we only care about pinned module version and do not need to check the rules. This option can be used to skip rule evaluation.
	AreRulesIgnored bool `json:"are_rules_ignored,omitempty"`

	// PinnedModuleVersions The normal response body only includes the latest versions for modules. However if there are pinned resources, we need to request the pinned versions as well which may no longer have rules associated with them.
	PinnedModuleVersions []string `json:"pinned_module_versions,omitempty"`
}

// InternalModuleCatalogueModule defines model for InternalModuleCatalogueModule.
type InternalModuleCatalogueModule struct {
	// Coprovisioned A set of resources to provision after or in parallel with the resource of the current module.
	Coprovisioned []ModuleCoProvisionManifest `json:"coprovisioned"`

	// CreatedAt The date and time when the module was created.
	CreatedAt time.Time `json:"created_at"`

	// Dependencies A mapping of alias to resource dependencies that must be provisioned with this module
	Dependencies map[string]ModuleDependencyManifest `json:"dependencies"`

	// Description An optional text description for this module
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for a module
	Id ModuleId `json:"id"`

	// ModuleInputs The inputs to the module. These may contain expressions referencing the modules context.
	ModuleInputs map[string]interface{} `json:"module_inputs"`

	// ModuleSource The source of the OpenTofu module backing this module.
	ModuleSource *string `json:"module_source,omitempty"`

	// ModuleSourceCode The source code of the OpenTofu module backing this module.
	ModuleSourceCode *string `json:"module_source_code,omitempty"`

	// OrgId The Organization ID
	OrgId string `json:"org_id"`

	// ProviderMapping A mapping of module providers to use when provisioning using this module
	ProviderMapping map[string]string `json:"provider_mapping"`

	// ResourceType The resource type that this module provisions.
	ResourceType string                              `json:"resource_type"`
	Rules        []InternalModuleCatalogueModuleRule `json:"rules"`

	// UpdatedAt The date and time when the module was updated to this version.
	UpdatedAt time.Time `json:"updated_at"`

	// VersionId A unique identifier for this version of the module
	VersionId string `json:"version_id"`
}

// InternalModuleCatalogueModuleRule A rule within a module
type InternalModuleCatalogueModuleRule struct {
	// EnvId The optional environment id that this rule matches.
	EnvId *string `json:"env_id,omitempty"`

	// EnvTypeId The optional env type id that this rule matches.
	EnvTypeId *string `json:"env_type_id,omitempty"`

	// ProjectId The optional project id that this rule matches.
	ProjectId *string `json:"project_id,omitempty"`

	// ResourceClass A resource class requested by the resource graph. 'default' is the default value.
	ResourceClass ResourceClass `json:"resource_class"`

	// ResourceId A specific resource id requested by the resource graph
	ResourceId *ResourceId        `json:"resource_id,omitempty"`
	RuleId     openapi_types.UUID `json:"rule_id"`
}

// InternalOrganization The internal state of an organization known by the control plane.
type InternalOrganization struct {
	// CreatedAt The date and time when the org state was created.
	CreatedAt time.Time `json:"created_at"`

	// Id The unique identifier of the org
	Id string `json:"id"`

	// Uuid Unique uid for the org to identify a unique lifecycle
	Uuid openapi_types.UUID `json:"uuid"`
}

// InternalOrganizationCreateBody A request to create a new organization state in the control plane.
type InternalOrganizationCreateBody struct {
	// Id The unique identifier of the org
	Id string `json:"id"`
}

// InternalOrganizationPage A page of organization state returned from the list api.
type InternalOrganizationPage struct {
	// Items The items in this page
	Items []InternalOrganization `json:"items"`

	// NextPageToken The page token to use to request the next page of items
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// InternalRunner defines model for InternalRunner.
type InternalRunner struct {
	// CreatedAt The date and time when the runner was created.
	CreatedAt time.Time `json:"created_at"`

	// Description An optional text description for this runner.
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the runner under the organization.
	Id string `json:"id"`

	// OrgId The Organization ID.
	OrgId string `json:"org_id"`

	// RunnerConfiguration The data needed to configure the runner.
	RunnerConfiguration RunnerConfiguration `json:"runner_configuration"`

	// RunnerConfigurationSecret Secret path and version of a secret stored in the internal store.
	RunnerConfigurationSecret ConfigurationSecret `json:"runner_configuration_secret,omitempty"`

	// StateStorageConfiguration Configuration for the Terraform Backend used by the runner.
	StateStorageConfiguration StateStorageConfiguration `json:"state_storage_configuration"`

	// UpdatedAt The date and time when the runner was updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// K8sGkeRunnerConfiguration Runner configuration for a GKE cluster.
type K8sGkeRunnerConfiguration struct {
	// Cluster Configuration to access a GKE cluster.
	Cluster K8sRunnerGkeCluster `json:"cluster"`

	// Job Properties of the Kubernetes Runner Job.
	Job K8sRunnerJobConfig `json:"job"`

	// Type The Runner type.
	Type RunnerType `json:"type"`
}

// K8sGkeRunnerConfigurationUpdateBody Object to update an existing runner configuration for a GKE cluster.
type K8sGkeRunnerConfigurationUpdateBody struct {
	// Cluster Configuration to access a GKE cluster.
	Cluster *K8sRunnerGkeCluster `json:"cluster,omitempty"`

	// Job Properties of the Kubernetes Runner Job.
	Job *K8sRunnerJobConfig `json:"job,omitempty"`

	// Type The Runner type.
	Type RunnerType `json:"type"`
}

// K8sRunnerConfiguration Runner configuration for a Kubernetes cluster.
type K8sRunnerConfiguration struct {
	// Cluster Configuration to obtain access token to a generic K8s cluster with auth
	Cluster K8sRunnerK8sCluster `json:"cluster"`

	// Job Properties of the Kubernetes Runner Job.
	Job K8sRunnerJobConfig `json:"job"`

	// Type The Runner type.
	Type RunnerType `json:"type"`
}

// K8sRunnerConfigurationUpdateBody Object to update an existing runner configuration for a Kubernetes cluster.
type K8sRunnerConfigurationUpdateBody struct {
	// Cluster Configuration to obtain access token to a generic K8s cluster with auth
	Cluster *K8sRunnerK8sCluster `json:"cluster,omitempty"`

	// Job Properties of the Kubernetes Runner Job.
	Job *K8sRunnerJobConfig `json:"job,omitempty"`

	// Type The Runner type.
	Type RunnerType `json:"type"`
}

// K8sRunnerGcpTemporaryAuth Configuration to obtain temporary access token to access a GKE cluster.
type K8sRunnerGcpTemporaryAuth struct {
	// GcpAudience The URL of the workload identity pool provider used as an audience for OIDC token.
	GcpAudience string `json:"gcp_audience"`

	// GcpServiceAccount The Google service account to impersonate.
	GcpServiceAccount string `json:"gcp_service_account"`
}

// K8sRunnerGkeCluster Configuration to access a GKE cluster.
type K8sRunnerGkeCluster struct {
	// Auth Configuration to obtain temporary access token to access a GKE cluster.
	Auth K8sRunnerGcpTemporaryAuth `json:"auth"`

	// InternalIp Uses the private endpoint address of the cluster if the private endpoint is enabled.
	InternalIp *bool `json:"internal_ip,omitempty"`

	// Location GCP cluster Location.
	Location string `json:"location"`

	// Name Name of the cluster.
	Name      string `json:"name"`
	ProjectId string `json:"project_id"`

	// ProxyUrl Cluster Proxy URL.
	ProxyUrl *string `json:"proxy_url,omitempty"`
}

// K8sRunnerJobConfig Properties of the Kubernetes Runner Job.
type K8sRunnerJobConfig struct {
	// Namespace Namespace where the Job runs.
	Namespace string `json:"namespace"`

	// PodTemplate The Pod Template Spec manifest which defines the runner job pod in the target cluster. It will be merged with the default Job Pod Template Spec.
	PodTemplate *map[string]interface{} `json:"pod_template,omitempty"`

	// ServiceAccount Service Account the Job runs with.
	ServiceAccount string `json:"service_account"`
}

// K8sRunnerK8sCluster Configuration to obtain access token to a generic K8s cluster with auth
type K8sRunnerK8sCluster struct {
	// Auth Configuration to obtain access to a k8s cluster.
	Auth K8sRunnerK8sClusterAuth `json:"auth"`

	// ClusterData Cluster data to access Kubernetes cluster.
	ClusterData K8sRunnerK8sClusterClusterData `json:"cluster_data"`
}

// K8sRunnerK8sClusterAuth Configuration to obtain access to a k8s cluster.
type K8sRunnerK8sClusterAuth struct {
	// ClientCertificateData Kubeconfig Field: user.client-certificate-data
	ClientCertificateData *string `json:"client-certificate-data,omitempty"`

	// ClientKeyData Kubeconfig Field: user.client-key-data
	ClientKeyData *string `json:"client-key-data,omitempty"`

	// ServiceAccountToken Service account token.
	ServiceAccountToken *string `json:"service_account_token,omitempty"`
}

// K8sRunnerK8sClusterClusterData Cluster data to access Kubernetes cluster.
type K8sRunnerK8sClusterClusterData struct {
	// CertificateAuthorityData Kubeconfig Field: cluster.certificate-authority-data
	CertificateAuthorityData string `json:"certificate-authority-data"`

	// ProxyUrl Kubeconfig Field: cluster.proxy-url
	ProxyUrl *string `json:"proxy_url,omitempty"`

	// Server Kubeconfig Field: cluster.server
	Server string `json:"server"`
}

// K8sStorageConfiguration Configuration to use the Kubernetes Backend as backend of this runner. The in-cluster mode is used.
type K8sStorageConfiguration struct {
	// Namespace Where the secrets with the state should be created.
	Namespace string `json:"namespace"`

	// Type Type of the Terraform Backend used by the runner.
	Type StateStorageType `json:"type"`
}

// Module defines model for Module.
type Module struct {
	// Coprovisioned A set of resources to provision after or in parallel with the resource of the current module.
	Coprovisioned []ModuleCoProvisionManifest `json:"coprovisioned"`

	// CreatedAt The date and time when the module was created.
	CreatedAt time.Time `json:"created_at"`

	// Dependencies A mapping of alias to resource dependencies that must be provisioned with this module
	Dependencies map[string]ModuleDependencyManifest `json:"dependencies"`

	// Description An optional text description for this module
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for a module
	Id ModuleId `json:"id"`

	// ModuleInputs The inputs to the module. These may contain expressions referencing the modules context.
	ModuleInputs map[string]interface{} `json:"module_inputs"`

	// ModuleSource The source of the OpenTofu module backing this module.
	ModuleSource *string `json:"module_source,omitempty"`

	// ModuleSourceCode The source code of the OpenTofu module backing this module.
	ModuleSourceCode *string `json:"module_source_code,omitempty"`

	// OrgId The Organization ID
	OrgId string `json:"org_id"`

	// ProviderMapping A mapping of module providers to use when provisioning using this module
	ProviderMapping map[string]string `json:"provider_mapping"`

	// ResourceType The resource type that this module provisions.
	ResourceType string `json:"resource_type"`

	// UpdatedAt The date and time when the module was updated to this version.
	UpdatedAt time.Time `json:"updated_at"`

	// VersionId A unique identifier for this version of the module
	VersionId string `json:"version_id"`
}

// ModuleCoProvisionManifest A resource to provision after or in parallel with the resource of the current module.
type ModuleCoProvisionManifest struct {
	// Class A resource class requested by the resource graph. 'default' is the default value.
	Class *ResourceClass `json:"class,omitempty"`

	// CopyDependentsFromCurrent If true, all resources that depend on the current resource will also depend on (be provisioned after) this coprovisioned resource.
	CopyDependentsFromCurrent bool `json:"copy_dependents_from_current,omitempty"`

	// Id A specific resource id requested by the resource graph
	Id *ResourceId `json:"id,omitempty"`

	// IsDependentOnCurrent If true, this coprovisioned resource will have a dependency on the current resource so that the current
	// resource must be successfully provisioned before the coprovisioned one is.
	IsDependentOnCurrent bool `json:"is_dependent_on_current,omitempty"`

	// Params The parameters to pass for provisioning.
	Params map[string]interface{} `json:"params,omitempty"`

	// Type The resource type to provision
	Type string `json:"type"`
}

// ModuleCreateBody A request to create a new module
type ModuleCreateBody struct {
	// Coprovisioned A set of resources to provision after or in parallel with the resource of the current module.
	Coprovisioned []ModuleCoProvisionManifest `json:"coprovisioned,omitempty"`

	// Dependencies A mapping of alias to resource dependencies that must be provisioned with this module
	Dependencies map[string]ModuleDependencyManifest `json:"dependencies,omitempty"`

	// Description An optional text description for this module
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for a module
	Id ModuleId `json:"id"`

	// ModuleInputs The inputs to the module. These may contain expressions referencing the modules context.
	ModuleInputs map[string]interface{} `json:"module_inputs,omitempty"`

	// ModuleSource The source of the OpenTofu module backing this module. Required, if module source code is not defined.
	ModuleSource *string `json:"module_source,omitempty"`

	// ModuleSourceCode The source code of the OpenTofu module backing this module. Required, if module source is not defined.
	ModuleSourceCode *string `json:"module_source_code,omitempty"`

	// ProviderMapping A mapping of module providers to use when provisioning using this module.
	ProviderMapping map[string]string `json:"provider_mapping,omitempty"`

	// ResourceType The resource type that this module provisions.
	ResourceType string `json:"resource_type"`
}

// ModuleDependencyManifest A dependency to provision before the current resource is provisioned
type ModuleDependencyManifest struct {
	// Class A resource class requested by the resource graph. 'default' is the default value.
	Class *ResourceClass `json:"class,omitempty"`

	// Id A specific resource id requested by the resource graph
	Id *ResourceId `json:"id,omitempty"`

	// Params The parameters to pass to the dependency for provisioning.
	Params map[string]interface{} `json:"params,omitempty"`

	// Type The resource type to provision
	Type string `json:"type"`
}

// ModuleId The unique identifier for a module
type ModuleId = string

// ModulePage A page of the list modules response.
type ModulePage struct {
	// Items The items in this page
	Items []ModuleSummary `json:"items"`

	// NextPageToken The page token to use to request the next page of items
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// ModuleProvider defines model for ModuleProvider.
type ModuleProvider struct {
	// Configuration Any required configuration for this provider when used.
	Configuration map[string]interface{} `json:"configuration"`

	// CreatedAt The date and time when the provider was created.
	CreatedAt time.Time `json:"created_at"`

	// Description An optional text description for this module provider
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for this module provider under the given provider type
	Id string `json:"id"`

	// OrgId The Organization ID
	OrgId string `json:"org_id"`

	// ProviderType The OpenTofu provider name
	ProviderType string `json:"provider_type"`

	// Source The OpenTofu provider source as a registry coordinate
	Source string `json:"source"`

	// VersionConstraint Specify a specific version of the provider
	VersionConstraint string `json:"version_constraint"`
}

// ModuleProviderCreateBody A request to create a new module provider.
type ModuleProviderCreateBody struct {
	// Configuration Any required configuration for this provider when used.
	Configuration map[string]interface{} `json:"configuration,omitempty"`

	// Description An optional text description for this module provider
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for this module provider under the given provider type
	Id string `json:"id"`

	// ProviderType The OpenTofu provider name
	ProviderType string `json:"provider_type"`

	// Source The OpenTofu provider source as a registry coordinate
	Source string `json:"source"`

	// VersionConstraint Specify a specific version of the provider
	VersionConstraint string `json:"version_constraint"`
}

// ModuleProviderPage A page of module providers returned from the list api.
type ModuleProviderPage struct {
	// Items The items in this page
	Items []ModuleProviderSummary `json:"items"`

	// NextPageToken The page token to use to request the next page of items
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// ModuleProviderSummary A summary of configuration for an OpenTofu provider that will be used in modules
type ModuleProviderSummary struct {
	// CreatedAt The date and time when the provider was created.
	CreatedAt time.Time `json:"created_at"`

	// Description An optional text description for this module provider
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for this module provider under the given provider type
	Id string `json:"id"`

	// OrgId The Organization ID
	OrgId string `json:"org_id"`

	// ProviderType The OpenTofu provider name
	ProviderType string `json:"provider_type"`

	// Source The OpenTofu provider source as a registry coordinate
	Source string `json:"source"`
}

// ModuleProviderUpdateBody A request to update a module provider
type ModuleProviderUpdateBody struct {
	// Configuration Any required configuration for this provider when used.
	Configuration *map[string]interface{} `json:"configuration,omitempty"`

	// Description An optional text description for this module provider
	Description *string `json:"description,omitempty"`

	// VersionConstraint Specify a specific version of the provider
	VersionConstraint *string `json:"version_constraint,omitempty"`
}

// ModuleSummary A summary of the module that maps an OpenTofu module to a resource type. The full details can be retrieved through the Get api.
type ModuleSummary struct {
	// CreatedAt The date and time when the module was created.
	CreatedAt time.Time `json:"created_at"`

	// Description An optional text description for this module
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for a module
	Id ModuleId `json:"id"`

	// ModuleSource The source of the OpenTofu module backing this module.
	ModuleSource *string `json:"module_source,omitempty"`

	// ModuleSourceCode The source code of the OpenTofu module backing this module.
	ModuleSourceCode *string `json:"module_source_code,omitempty"`

	// OrgId The Organization ID
	OrgId string `json:"org_id"`

	// ProviderMapping A mapping of module providers to use when provisioning using this module
	ProviderMapping map[string]string `json:"provider_mapping"`

	// ResourceType The resource type that this module provisions.
	ResourceType string `json:"resource_type"`

	// UpdatedAt The date and time when the module was updated to this version.
	UpdatedAt time.Time `json:"updated_at"`

	// VersionId A unique identifier for this version of the module
	VersionId string `json:"version_id"`
}

// ModuleUpdateBody A request to update an existing module
type ModuleUpdateBody struct {
	// Coprovisioned A set of resources to provision after or in parallel with the resource of the current module.
	Coprovisioned *[]ModuleCoProvisionManifest `json:"coprovisioned,omitempty"`

	// Dependencies A mapping of alias to resource dependencies that must be provisioned with this module
	Dependencies *map[string]ModuleDependencyManifest `json:"dependencies,omitempty"`

	// Description An optional text description for this module
	Description *string `json:"description,omitempty"`

	// ModuleInputs The inputs to the module. These may contain expressions referencing the modules context.
	ModuleInputs *map[string]interface{} `json:"module_inputs,omitempty"`

	// ModuleSource The source of the OpenTofu module backing this module.
	ModuleSource *string `json:"module_source,omitempty"`

	// ModuleSourceCode The source code of the OpenTofu module backing this module.
	ModuleSourceCode *string `json:"module_source_code,omitempty"`

	// ProviderMapping A mapping of module providers to use when provisioning using this module.
	ProviderMapping *map[string]string `json:"provider_mapping,omitempty"`
}

// Project A project.
type Project struct {
	// CreatedAt The date and time when the project was created
	CreatedAt time.Time `json:"created_at"`

	// DisplayName Project human readable name
	DisplayName string `json:"display_name"`

	// Id Project identifier
	Id string `json:"id"`

	// Status The status of the project. Projects are normally active unless they have been deleted. A deleting project is waiting for it's environments to be deleted.
	Status ProjectStatus `json:"status"`

	// UpdatedAt The date and time when the project was updated due to internal or external changes
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique uid for the project to identify a unique lifecycle
	Uuid openapi_types.UUID `json:"uuid"`
}

// ProjectStatus The status of the project. Projects are normally active unless they have been deleted. A deleting project is waiting for it's environments to be deleted.
type ProjectStatus string

// ProjectCreateBody A request to create a new project.
type ProjectCreateBody struct {
	// DisplayName Project human readable name. The id is used if this is not specified.
	DisplayName *string `json:"display_name,omitempty"`

	// Id Project identifier
	Id string `json:"id"`
}

// ProjectPage A page of projects returned from the list api.
type ProjectPage struct {
	// Items The items in this page
	Items []Project `json:"items"`

	// NextPageToken The page token to use to request the next page of items
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// RefreshRunnerActionResult The response body for refreshing a runner in an environment.
type RefreshRunnerActionResult struct {
	// RunnerId The ID of the runner to refresh.
	RunnerId string `json:"runner_id"`

	// Updated If true, it means that the runner was updated to a new value. Otherwise it was not updated and `runner_id` indicates the existing value.
	Updated bool `json:"updated"`
}

// RemoteK8sRunnerConfiguration Runner configuration for a remote Kubernetes cluster.
type RemoteK8sRunnerConfiguration struct {
	// Job Properties of the Kubernetes Runner Job.
	Job K8sRunnerJobConfig `json:"job"`

	// Type The Runner type.
	Type RunnerType `json:"type"`
}

// RemoteK8sRunnerConfigurationUpdateBody Object to update an existing runner configuration for a remote Kubernetes cluster.
type RemoteK8sRunnerConfigurationUpdateBody struct {
	// Job Properties of the Kubernetes Runner Job.
	Job *K8sRunnerJobConfig `json:"job,omitempty"`

	// Type The Runner type.
	Type RunnerType `json:"type"`
}

// ResourceClass A resource class requested by the resource graph. 'default' is the default value.
type ResourceClass = string

// ResourceId A specific resource id requested by the resource graph
type ResourceId = string

// ResourceType A resource type that can be used in modules.
type ResourceType struct {
	// BuiltIn Indicates if this is a built-in resource type
	BuiltIn bool `json:"built_in"`

	// CreatedAt The date and time when the resource type was created
	CreatedAt time.Time `json:"created_at"`

	// Description Resource type description
	Description *string `json:"description,omitempty"`

	// Id Resource type identifier
	Id string `json:"id"`

	// IsDeveloperAccessible Indicates if this resource type is for developers to use in the manifest. Resource types with this flag set to false will not be available as types of resources in a manifest.
	IsDeveloperAccessible bool `json:"is_developer_accessible"`

	// OutputSchema Schema for output parameters
	OutputSchema map[string]interface{} `json:"output_schema"`
}

// ResourceTypeCreateBody A request to create a new resource type.
type ResourceTypeCreateBody struct {
	// Description Resource type description
	Description *string `json:"description,omitempty"`

	// Id Resource type identifier
	Id string `json:"id"`

	// IsDeveloperAccessible Indicates if this resource type is for developers to use in the manifest. Resource types with this flag set to false, will not be available as types of resources in a manifest. If omitted, this property defaults to true.
	IsDeveloperAccessible *bool `json:"is_developer_accessible,omitempty"`

	// OutputSchema Schema for output parameters
	OutputSchema map[string]interface{} `json:"output_schema"`
}

// ResourceTypePage A page of resource types returned from the list api.
type ResourceTypePage struct {
	// Items The items in this page
	Items []ResourceType `json:"items"`

	// NextPageToken The page token to use to request the next page of items
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// ResourceTypeUpdateBody A request to update a resource type.
type ResourceTypeUpdateBody struct {
	// Description Resource type description
	Description *string `json:"description,omitempty"`

	// IsDeveloperAccessible Indicates if this resource type is for developers to use in the manifest. Resource types with this flag set to false, will not be available as types of resources in a manifest.
	IsDeveloperAccessible *bool `json:"is_developer_accessible,omitempty"`

	// OutputSchema Schema for output parameters
	OutputSchema *map[string]interface{} `json:"output_schema,omitempty"`
}

// Rule A summary of a rule that matches resource requests against a module
type Rule = RuleSummary

// RuleCreateBody The properties required to create a new rule that matches modules
type RuleCreateBody struct {
	// EnvId Environment identifier to match this rule. This environment must exist in the app given by project_id.
	// Requires project_id to be set, mutually exclusive with env_type_id.
	EnvId *string `json:"env_id,omitempty"`

	// EnvTypeId The environment type to match this rule. This environment type must exist in the org.
	// Mutually exclusive with env_id.
	EnvTypeId *string `json:"env_type_id,omitempty"`

	// ModuleId The unique identifier for a module
	ModuleId ModuleId `json:"module_id"`

	// ProjectId Project identifier to match this rule. This app must exist in the org.
	ProjectId *string `json:"project_id,omitempty"`

	// ResourceClass A resource class requested by the resource graph. 'default' is the default value.
	ResourceClass *ResourceClass `json:"resource_class,omitempty"`

	// ResourceId A specific resource id requested by the resource graph
	ResourceId *ResourceId `json:"resource_id,omitempty"`
}

// RulePage A page of rules returned from the list api.
type RulePage struct {
	// Items The items in this page.
	Items []RuleSummary `json:"items"`

	// NextPageToken The page token to use to request the next page of items.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// RuleSummary A summary of a rule that matches resource requests against a module
type RuleSummary struct {
	// CreatedAt The time this rule was created
	CreatedAt time.Time `json:"created_at"`

	// EnvId The optional environment id that this rule matches.
	EnvId *string `json:"env_id,omitempty"`

	// EnvTypeId The optional env type id that this rule matches.
	EnvTypeId *string `json:"env_type_id,omitempty"`

	// Id The unique identifier for the rule under the organization.
	Id openapi_types.UUID `json:"id"`

	// ModuleId The unique identifier for a module
	ModuleId ModuleId `json:"module_id"`

	// OrgId The Organization ID.
	OrgId string `json:"org_id"`

	// ProjectId The optional project id that this rule matches.
	ProjectId *string `json:"project_id,omitempty"`

	// ResourceClass The resource class to match
	ResourceClass string `json:"resource_class"`

	// ResourceId The resource id to match
	ResourceId *string `json:"resource_id,omitempty"`

	// ResourceType The resource type matched by this rule
	ResourceType string `json:"resource_type"`
}

// Runner defines model for Runner.
type Runner struct {
	// CreatedAt The date and time when the runner was created.
	CreatedAt time.Time `json:"created_at"`

	// Description An optional text description for this runner.
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the runner under the organization.
	Id string `json:"id"`

	// OrgId The Organization ID.
	OrgId string `json:"org_id"`

	// RunnerConfiguration The data needed to configure the runner.
	RunnerConfiguration RunnerConfiguration `json:"runner_configuration"`

	// StateStorageConfiguration Configuration for the Terraform Backend used by the runner.
	StateStorageConfiguration StateStorageConfiguration `json:"state_storage_configuration"`

	// UpdatedAt The date and time when the runner was updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// RunnerConfiguration The data needed to configure the runner.
type RunnerConfiguration struct {
	union json.RawMessage
}

// RunnerConfigurationSummary A summary of the runner configuration.
type RunnerConfigurationSummary struct {
	// Type The Runner type.
	Type RunnerType `json:"type"`
}

// RunnerConfigurationUpdate The data needed to update the runner configuration.
type RunnerConfigurationUpdate struct {
	union json.RawMessage
}

// RunnerCreateBody A request to create a new runner.
type RunnerCreateBody struct {
	// Description An optional text description for this runner.
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the runner under the organization.
	Id string `json:"id"`

	// RunnerConfiguration The data needed to configure the runner.
	RunnerConfiguration RunnerConfiguration `json:"runner_configuration"`

	// StateStorageConfiguration Configuration for the Terraform Backend used by the runner.
	StateStorageConfiguration StateStorageConfiguration `json:"state_storage_configuration"`
}

// RunnerPage A page of runners returned from the list api.
type RunnerPage struct {
	// Items The items in this page.
	Items []RunnerSummary `json:"items"`

	// NextPageToken The page token to use to request the next page of items.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// RunnerRule A summary of a rule that matches resource requests against a module
type RunnerRule = RunnerRuleSummary

// RunnerRuleCreateBody The properties required to create a new rule that matches runners
type RunnerRuleCreateBody struct {
	// EnvTypeId The environment type to match this rule. This environment type must exist in the org.
	EnvTypeId *string `json:"env_type_id,omitempty"`

	// ProjectId Project identifier to match this rule. This project must exist in the org.
	ProjectId *string `json:"project_id,omitempty"`

	// RunnerId The unique identifier for a runner
	RunnerId string `json:"runner_id"`
}

// RunnerRulePage A page of rules returned from the list api.
type RunnerRulePage struct {
	// Items The items in this page.
	Items []RunnerRuleSummary `json:"items"`

	// NextPageToken The page token to use to request the next page of items.
	NextPageToken *string `json:"next_page_token,omitempty"`
}

// RunnerRuleSummary A summary of a rule that matches resource requests against a module
type RunnerRuleSummary struct {
	// CreatedAt The time this rule was created
	CreatedAt time.Time `json:"created_at"`

	// EnvTypeId The optional env type id that this rule matches.
	EnvTypeId string `json:"env_type_id"`

	// Id The unique identifier for the rule under the organization.
	Id openapi_types.UUID `json:"id"`

	// OrgId The Organization ID.
	OrgId string `json:"org_id"`

	// ProjectId The optional project id that this rule matches.
	ProjectId string `json:"project_id"`

	// RunnerId The unique identifier for a runner
	RunnerId string `json:"runner_id"`
}

// RunnerSummary A summary of configuration a runner.
type RunnerSummary struct {
	// CreatedAt The date and time when the runner was created.
	CreatedAt time.Time `json:"created_at"`

	// Description An optional text description for this runner.
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the runner under the organization.
	Id string `json:"id"`

	// OrgId The Organization ID.
	OrgId string `json:"org_id"`

	// RunnerConfiguration A summary of the runner configuration.
	RunnerConfiguration *RunnerConfigurationSummary `json:"runner_configuration,omitempty"`

	// StateStorageConfiguration Summary of the state storage configuration.
	StateStorageConfiguration *StateStorageConfigurationSummary `json:"state_storage_configuration,omitempty"`

	// UpdatedAt The date and time when the runner was updated.
	UpdatedAt time.Time `json:"updated_at"`
}

// RunnerType The Runner type.
type RunnerType string

// RunnerUpdateBody A request to update a runner
type RunnerUpdateBody struct {
	// Description An optional text description for this runner.
	Description *string `json:"description,omitempty"`

	// RunnerConfiguration The data needed to update the runner configuration.
	RunnerConfiguration *RunnerConfigurationUpdate `json:"runner_configuration,omitempty"`

	// StateStorageConfiguration Configuration for the Terraform Backend used by the runner.
	StateStorageConfiguration *StateStorageConfiguration `json:"state_storage_configuration,omitempty"`
}

// StateStorageConfiguration Configuration for the Terraform Backend used by the runner.
type StateStorageConfiguration struct {
	union json.RawMessage
}

// StateStorageConfigurationSummary Summary of the state storage configuration.
type StateStorageConfigurationSummary struct {
	// Type Type of the Terraform Backend used by the runner.
	Type StateStorageType `json:"type"`
}

// StateStorageType Type of the Terraform Backend used by the runner.
type StateStorageType string

// DryRunQueryParam defines model for dryRunQueryParam.
type DryRunQueryParam = bool

// EnvIdPathParam defines model for envIdPathParam.
type EnvIdPathParam = string

// EnvTypeIdPathParam defines model for envTypeIdPathParam.
type EnvTypeIdPathParam = string

// IncludeNonDeveloperAccessibleQueryParam defines model for includeNonDeveloperAccessibleQueryParam.
type IncludeNonDeveloperAccessibleQueryParam = bool

// ModuleIdPathParam defines model for moduleIdPathParam.
type ModuleIdPathParam = string

// OrgIdPathParam defines model for orgIdPathParam.
type OrgIdPathParam = string

// PageTokenQueryParam defines model for pageTokenQueryParam.
type PageTokenQueryParam = string

// PerPageQueryParam defines model for perPageQueryParam.
type PerPageQueryParam = int

// ProjectIdPathParam defines model for projectIdPathParam.
type ProjectIdPathParam = string

// ProviderIdPathParam defines model for providerIdPathParam.
type ProviderIdPathParam = string

// ProviderTypePathParam defines model for providerTypePathParam.
type ProviderTypePathParam = string

// ResourceTypeIdPathParam defines model for resourceTypeIdPathParam.
type ResourceTypeIdPathParam = string

// ResourceTypeIdQueryParam defines model for resourceTypeIdQueryParam.
type ResourceTypeIdQueryParam = string

// RuleIdPathParam defines model for ruleIdPathParam.
type RuleIdPathParam = openapi_types.UUID

// RunnerIdPathParam defines model for runnerIdPathParam.
type RunnerIdPathParam = string

// N400BadRequest A standard error response
type N400BadRequest = Error

// N404NotFound A standard error response
type N404NotFound = Error

// N409Conflict A standard error response
type N409Conflict = Error

// ListInternalOrganizationsParams defines parameters for ListInternalOrganizations.
type ListInternalOrganizationsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// InternalListResourceTypesParams defines parameters for InternalListResourceTypes.
type InternalListResourceTypesParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListEnvironmentTypesParams defines parameters for ListEnvironmentTypes.
type ListEnvironmentTypesParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListModuleProvidersParams defines parameters for ListModuleProviders.
type ListModuleProvidersParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// ByProviderType Filter the list by the given provider type
	ByProviderType *string `form:"byProviderType,omitempty" json:"byProviderType,omitempty"`
}

// ListModuleRulesInOrgParams defines parameters for ListModuleRulesInOrg.
type ListModuleRulesInOrgParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// ByResourceType Filter the list by the given resource type
	ByResourceType *string `form:"byResourceType,omitempty" json:"byResourceType,omitempty"`

	// ByModuleId Filter the list by the given module id
	ByModuleId *string `form:"byModuleId,omitempty" json:"byModuleId,omitempty"`
}

// ListModulesParams defines parameters for ListModules.
type ListModulesParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// ByResourceType Filter the list by the given resource type
	ByResourceType *string `form:"byResourceType,omitempty" json:"byResourceType,omitempty"`
}

// ListProjectsParams defines parameters for ListProjects.
type ListProjectsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListEnvironmentsParams defines parameters for ListEnvironments.
type ListEnvironmentsParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// ByEnvTypeId Filter the list by environment types
	ByEnvTypeId *[]string `form:"byEnvTypeId,omitempty" json:"byEnvTypeId,omitempty"`
}

// UpdateRunnerInAnEnvironmentParams defines parameters for UpdateRunnerInAnEnvironment.
type UpdateRunnerInAnEnvironmentParams struct {
	// DryRun If true, the request will not make any changes to the system, but will return what would have been done.
	DryRun *DryRunQueryParam `form:"dry_run,omitempty" json:"dry_run,omitempty"`
}

// ListAvailableResourceTypesParams defines parameters for ListAvailableResourceTypes.
type ListAvailableResourceTypesParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// TypeId Filter by resource type id.
	TypeId *ResourceTypeIdQueryParam `form:"type_id,omitempty" json:"type_id,omitempty"`

	// IncludeNonDeveloperAccessible If true, the list will include resources that are not accessible to developers.
	IncludeNonDeveloperAccessible *IncludeNonDeveloperAccessibleQueryParam `form:"include_non_developer_accessible,omitempty" json:"include_non_developer_accessible,omitempty"`
}

// ListResourceTypesParams defines parameters for ListResourceTypes.
type ListResourceTypesParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListRunnerRulesInOrgParams defines parameters for ListRunnerRulesInOrg.
type ListRunnerRulesInOrgParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// ByProjectId Filter the list by the given project
	ByProjectId *string `form:"byProjectId,omitempty" json:"byProjectId,omitempty"`

	// ByEnvTypeId Filter the list by the given environment type id
	ByEnvTypeId *string `form:"byEnvTypeId,omitempty" json:"byEnvTypeId,omitempty"`

	// ByRunnerId Filter the list by the given runner id
	ByRunnerId *string `form:"byRunnerId,omitempty" json:"byRunnerId,omitempty"`
}

// ListRunnersParams defines parameters for ListRunners.
type ListRunnersParams struct {
	// PerPage The maximum number of items to return in a page of results
	PerPage *PerPageQueryParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page The page token to request from
	Page *PageTokenQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// ByRunnerType Filter the list by the given runner type
	ByRunnerType *string `form:"byRunnerType,omitempty" json:"byRunnerType,omitempty"`
}

// CreateInternalOrganizationJSONRequestBody defines body for CreateInternalOrganization for application/json ContentType.
type CreateInternalOrganizationJSONRequestBody = InternalOrganizationCreateBody

// InternalUpdateEnvironmentJSONRequestBody defines body for InternalUpdateEnvironment for application/json ContentType.
type InternalUpdateEnvironmentJSONRequestBody = EnvironmentInternalUpdateBody

// GenerateInternalModuleCatalogueJSONRequestBody defines body for GenerateInternalModuleCatalogue for application/json ContentType.
type GenerateInternalModuleCatalogueJSONRequestBody = InternalModuleCatalogueGenerateBody

// InternalCreateResourceTypeJSONRequestBody defines body for InternalCreateResourceType for application/json ContentType.
type InternalCreateResourceTypeJSONRequestBody = ResourceTypeCreateBody

// InternalUpdateResourceTypeJSONRequestBody defines body for InternalUpdateResourceType for application/json ContentType.
type InternalUpdateResourceTypeJSONRequestBody = ResourceTypeUpdateBody

// CreateEnvironmentTypeJSONRequestBody defines body for CreateEnvironmentType for application/json ContentType.
type CreateEnvironmentTypeJSONRequestBody = EnvironmentTypeCreateBody

// CreateModuleProviderJSONRequestBody defines body for CreateModuleProvider for application/json ContentType.
type CreateModuleProviderJSONRequestBody = ModuleProviderCreateBody

// UpdateModuleProviderJSONRequestBody defines body for UpdateModuleProvider for application/json ContentType.
type UpdateModuleProviderJSONRequestBody = ModuleProviderUpdateBody

// CreateModuleRuleInOrgJSONRequestBody defines body for CreateModuleRuleInOrg for application/json ContentType.
type CreateModuleRuleInOrgJSONRequestBody = RuleCreateBody

// CreateModuleJSONRequestBody defines body for CreateModule for application/json ContentType.
type CreateModuleJSONRequestBody = ModuleCreateBody

// UpdateModuleJSONRequestBody defines body for UpdateModule for application/json ContentType.
type UpdateModuleJSONRequestBody = ModuleUpdateBody

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = ProjectCreateBody

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = EnvironmentCreateBody

// CreateResourceTypeJSONRequestBody defines body for CreateResourceType for application/json ContentType.
type CreateResourceTypeJSONRequestBody = ResourceTypeCreateBody

// UpdateResourceTypeJSONRequestBody defines body for UpdateResourceType for application/json ContentType.
type UpdateResourceTypeJSONRequestBody = ResourceTypeUpdateBody

// CreateRunnerRuleInOrgJSONRequestBody defines body for CreateRunnerRuleInOrg for application/json ContentType.
type CreateRunnerRuleInOrgJSONRequestBody = RunnerRuleCreateBody

// CreateRunnerJSONRequestBody defines body for CreateRunner for application/json ContentType.
type CreateRunnerJSONRequestBody = RunnerCreateBody

// UpdateRunnerJSONRequestBody defines body for UpdateRunner for application/json ContentType.
type UpdateRunnerJSONRequestBody = RunnerUpdateBody

// AsK8sRunnerConfiguration returns the union data inside the RunnerConfiguration as a K8sRunnerConfiguration
func (t RunnerConfiguration) AsK8sRunnerConfiguration() (K8sRunnerConfiguration, error) {
	var body K8sRunnerConfiguration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromK8sRunnerConfiguration overwrites any union data inside the RunnerConfiguration as the provided K8sRunnerConfiguration
func (t *RunnerConfiguration) FromK8sRunnerConfiguration(v K8sRunnerConfiguration) error {
	v.Type = "kubernetes"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeK8sRunnerConfiguration performs a merge with any union data inside the RunnerConfiguration, using the provided K8sRunnerConfiguration
func (t *RunnerConfiguration) MergeK8sRunnerConfiguration(v K8sRunnerConfiguration) error {
	v.Type = "kubernetes"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsK8sGkeRunnerConfiguration returns the union data inside the RunnerConfiguration as a K8sGkeRunnerConfiguration
func (t RunnerConfiguration) AsK8sGkeRunnerConfiguration() (K8sGkeRunnerConfiguration, error) {
	var body K8sGkeRunnerConfiguration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromK8sGkeRunnerConfiguration overwrites any union data inside the RunnerConfiguration as the provided K8sGkeRunnerConfiguration
func (t *RunnerConfiguration) FromK8sGkeRunnerConfiguration(v K8sGkeRunnerConfiguration) error {
	v.Type = "kubernetes-gke"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeK8sGkeRunnerConfiguration performs a merge with any union data inside the RunnerConfiguration, using the provided K8sGkeRunnerConfiguration
func (t *RunnerConfiguration) MergeK8sGkeRunnerConfiguration(v K8sGkeRunnerConfiguration) error {
	v.Type = "kubernetes-gke"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRemoteK8sRunnerConfiguration returns the union data inside the RunnerConfiguration as a RemoteK8sRunnerConfiguration
func (t RunnerConfiguration) AsRemoteK8sRunnerConfiguration() (RemoteK8sRunnerConfiguration, error) {
	var body RemoteK8sRunnerConfiguration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRemoteK8sRunnerConfiguration overwrites any union data inside the RunnerConfiguration as the provided RemoteK8sRunnerConfiguration
func (t *RunnerConfiguration) FromRemoteK8sRunnerConfiguration(v RemoteK8sRunnerConfiguration) error {
	v.Type = "remote-kubernetes"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRemoteK8sRunnerConfiguration performs a merge with any union data inside the RunnerConfiguration, using the provided RemoteK8sRunnerConfiguration
func (t *RunnerConfiguration) MergeRemoteK8sRunnerConfiguration(v RemoteK8sRunnerConfiguration) error {
	v.Type = "remote-kubernetes"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunnerConfiguration) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RunnerConfiguration) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "kubernetes":
		return t.AsK8sRunnerConfiguration()
	case "kubernetes-gke":
		return t.AsK8sGkeRunnerConfiguration()
	case "remote-kubernetes":
		return t.AsRemoteK8sRunnerConfiguration()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RunnerConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunnerConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsK8sRunnerConfigurationUpdateBody returns the union data inside the RunnerConfigurationUpdate as a K8sRunnerConfigurationUpdateBody
func (t RunnerConfigurationUpdate) AsK8sRunnerConfigurationUpdateBody() (K8sRunnerConfigurationUpdateBody, error) {
	var body K8sRunnerConfigurationUpdateBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromK8sRunnerConfigurationUpdateBody overwrites any union data inside the RunnerConfigurationUpdate as the provided K8sRunnerConfigurationUpdateBody
func (t *RunnerConfigurationUpdate) FromK8sRunnerConfigurationUpdateBody(v K8sRunnerConfigurationUpdateBody) error {
	v.Type = "kubernetes"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeK8sRunnerConfigurationUpdateBody performs a merge with any union data inside the RunnerConfigurationUpdate, using the provided K8sRunnerConfigurationUpdateBody
func (t *RunnerConfigurationUpdate) MergeK8sRunnerConfigurationUpdateBody(v K8sRunnerConfigurationUpdateBody) error {
	v.Type = "kubernetes"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsK8sGkeRunnerConfigurationUpdateBody returns the union data inside the RunnerConfigurationUpdate as a K8sGkeRunnerConfigurationUpdateBody
func (t RunnerConfigurationUpdate) AsK8sGkeRunnerConfigurationUpdateBody() (K8sGkeRunnerConfigurationUpdateBody, error) {
	var body K8sGkeRunnerConfigurationUpdateBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromK8sGkeRunnerConfigurationUpdateBody overwrites any union data inside the RunnerConfigurationUpdate as the provided K8sGkeRunnerConfigurationUpdateBody
func (t *RunnerConfigurationUpdate) FromK8sGkeRunnerConfigurationUpdateBody(v K8sGkeRunnerConfigurationUpdateBody) error {
	v.Type = "kubernetes-gke"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeK8sGkeRunnerConfigurationUpdateBody performs a merge with any union data inside the RunnerConfigurationUpdate, using the provided K8sGkeRunnerConfigurationUpdateBody
func (t *RunnerConfigurationUpdate) MergeK8sGkeRunnerConfigurationUpdateBody(v K8sGkeRunnerConfigurationUpdateBody) error {
	v.Type = "kubernetes-gke"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRemoteK8sRunnerConfigurationUpdateBody returns the union data inside the RunnerConfigurationUpdate as a RemoteK8sRunnerConfigurationUpdateBody
func (t RunnerConfigurationUpdate) AsRemoteK8sRunnerConfigurationUpdateBody() (RemoteK8sRunnerConfigurationUpdateBody, error) {
	var body RemoteK8sRunnerConfigurationUpdateBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRemoteK8sRunnerConfigurationUpdateBody overwrites any union data inside the RunnerConfigurationUpdate as the provided RemoteK8sRunnerConfigurationUpdateBody
func (t *RunnerConfigurationUpdate) FromRemoteK8sRunnerConfigurationUpdateBody(v RemoteK8sRunnerConfigurationUpdateBody) error {
	v.Type = "remote-kubernetes"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRemoteK8sRunnerConfigurationUpdateBody performs a merge with any union data inside the RunnerConfigurationUpdate, using the provided RemoteK8sRunnerConfigurationUpdateBody
func (t *RunnerConfigurationUpdate) MergeRemoteK8sRunnerConfigurationUpdateBody(v RemoteK8sRunnerConfigurationUpdateBody) error {
	v.Type = "remote-kubernetes"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunnerConfigurationUpdate) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RunnerConfigurationUpdate) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "kubernetes":
		return t.AsK8sRunnerConfigurationUpdateBody()
	case "kubernetes-gke":
		return t.AsK8sGkeRunnerConfigurationUpdateBody()
	case "remote-kubernetes":
		return t.AsRemoteK8sRunnerConfigurationUpdateBody()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RunnerConfigurationUpdate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunnerConfigurationUpdate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsK8sStorageConfiguration returns the union data inside the StateStorageConfiguration as a K8sStorageConfiguration
func (t StateStorageConfiguration) AsK8sStorageConfiguration() (K8sStorageConfiguration, error) {
	var body K8sStorageConfiguration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromK8sStorageConfiguration overwrites any union data inside the StateStorageConfiguration as the provided K8sStorageConfiguration
func (t *StateStorageConfiguration) FromK8sStorageConfiguration(v K8sStorageConfiguration) error {
	v.Type = "kubernetes"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeK8sStorageConfiguration performs a merge with any union data inside the StateStorageConfiguration, using the provided K8sStorageConfiguration
func (t *StateStorageConfiguration) MergeK8sStorageConfiguration(v K8sStorageConfiguration) error {
	v.Type = "kubernetes"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StateStorageConfiguration) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t StateStorageConfiguration) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "kubernetes":
		return t.AsK8sStorageConfiguration()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t StateStorageConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StateStorageConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListInternalOrganizations request
	ListInternalOrganizations(ctx context.Context, params *ListInternalOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInternalOrganizationWithBody request with any body
	CreateInternalOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInternalOrganization(ctx context.Context, body CreateInternalOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInternalOrganization request
	GetInternalOrganization(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalUpdateEnvironmentWithBody request with any body
	InternalUpdateEnvironmentWithBody(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InternalUpdateEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body InternalUpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateInternalModuleCatalogueWithBody request with any body
	GenerateInternalModuleCatalogueWithBody(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateInternalModuleCatalogue(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body GenerateInternalModuleCatalogueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInternalRunner request
	GetInternalRunner(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalListResourceTypes request
	InternalListResourceTypes(ctx context.Context, params *InternalListResourceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalCreateResourceTypeWithBody request with any body
	InternalCreateResourceTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InternalCreateResourceType(ctx context.Context, body InternalCreateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalDeleteResourceType request
	InternalDeleteResourceType(ctx context.Context, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InternalUpdateResourceTypeWithBody request with any body
	InternalUpdateResourceTypeWithBody(ctx context.Context, typeId ResourceTypeIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InternalUpdateResourceType(ctx context.Context, typeId ResourceTypeIdPathParam, body InternalUpdateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironmentTypes request
	ListEnvironmentTypes(ctx context.Context, orgId OrgIdPathParam, params *ListEnvironmentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentTypeWithBody request with any body
	CreateEnvironmentTypeWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironmentType(ctx context.Context, orgId OrgIdPathParam, body CreateEnvironmentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironmentType request
	DeleteEnvironmentType(ctx context.Context, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentType request
	GetEnvironmentType(ctx context.Context, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModuleProviders request
	ListModuleProviders(ctx context.Context, orgId OrgIdPathParam, params *ListModuleProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateModuleProviderWithBody request with any body
	CreateModuleProviderWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateModuleProvider(ctx context.Context, orgId OrgIdPathParam, body CreateModuleProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModuleProvider request
	DeleteModuleProvider(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModuleProvider request
	GetModuleProvider(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateModuleProviderWithBody request with any body
	UpdateModuleProviderWithBody(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateModuleProvider(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, body UpdateModuleProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModuleRulesInOrg request
	ListModuleRulesInOrg(ctx context.Context, orgId OrgIdPathParam, params *ListModuleRulesInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateModuleRuleInOrgWithBody request with any body
	CreateModuleRuleInOrgWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateModuleRuleInOrg(ctx context.Context, orgId OrgIdPathParam, body CreateModuleRuleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModuleRuleInOrg request
	DeleteModuleRuleInOrg(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModuleRuleInOrg request
	GetModuleRuleInOrg(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModules request
	ListModules(ctx context.Context, orgId OrgIdPathParam, params *ListModulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateModuleWithBody request with any body
	CreateModuleWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateModule(ctx context.Context, orgId OrgIdPathParam, body CreateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteModule request
	DeleteModule(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModule request
	GetModule(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateModuleWithBody request with any body
	UpdateModuleWithBody(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateModule(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, body UpdateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjects request
	ListProjects(ctx context.Context, orgId OrgIdPathParam, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectWithBody request with any body
	CreateProjectWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProject(ctx context.Context, orgId OrgIdPathParam, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProject request
	DeleteProject(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProject request
	GetProject(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironments request
	ListEnvironments(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentWithBody request with any body
	CreateEnvironmentWithBody(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ForceDeleteEnvironment request
	ForceDeleteEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRunnerInAnEnvironment request
	UpdateRunnerInAnEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *UpdateRunnerInAnEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailableResourceTypes request
	ListAvailableResourceTypes(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *ListAvailableResourceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResourceTypes request
	ListResourceTypes(ctx context.Context, orgId OrgIdPathParam, params *ListResourceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourceTypeWithBody request with any body
	CreateResourceTypeWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResourceType(ctx context.Context, orgId OrgIdPathParam, body CreateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceType request
	DeleteResourceType(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceType request
	GetResourceType(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResourceTypeWithBody request with any body
	UpdateResourceTypeWithBody(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResourceType(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, body UpdateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRunnerRulesInOrg request
	ListRunnerRulesInOrg(ctx context.Context, orgId OrgIdPathParam, params *ListRunnerRulesInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRunnerRuleInOrgWithBody request with any body
	CreateRunnerRuleInOrgWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRunnerRuleInOrg(ctx context.Context, orgId OrgIdPathParam, body CreateRunnerRuleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRunnerRuleInOrg request
	DeleteRunnerRuleInOrg(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunnerRuleInOrg request
	GetRunnerRuleInOrg(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRunners request
	ListRunners(ctx context.Context, orgId OrgIdPathParam, params *ListRunnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRunnerWithBody request with any body
	CreateRunnerWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRunner(ctx context.Context, orgId OrgIdPathParam, body CreateRunnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRunner request
	DeleteRunner(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunner request
	GetRunner(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRunnerWithBody request with any body
	UpdateRunnerWithBody(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRunner(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, body UpdateRunnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListInternalOrganizations(ctx context.Context, params *ListInternalOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInternalOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInternalOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInternalOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInternalOrganization(ctx context.Context, body CreateInternalOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInternalOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInternalOrganization(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInternalOrganizationRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUpdateEnvironmentWithBody(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUpdateEnvironmentRequestWithBody(c.Server, orgId, projectId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUpdateEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body InternalUpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUpdateEnvironmentRequest(c.Server, orgId, projectId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateInternalModuleCatalogueWithBody(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateInternalModuleCatalogueRequestWithBody(c.Server, orgId, projectId, envId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateInternalModuleCatalogue(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body GenerateInternalModuleCatalogueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateInternalModuleCatalogueRequest(c.Server, orgId, projectId, envId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInternalRunner(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInternalRunnerRequest(c.Server, orgId, runnerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalListResourceTypes(ctx context.Context, params *InternalListResourceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalListResourceTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalCreateResourceTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalCreateResourceTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalCreateResourceType(ctx context.Context, body InternalCreateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalCreateResourceTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalDeleteResourceType(ctx context.Context, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalDeleteResourceTypeRequest(c.Server, typeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUpdateResourceTypeWithBody(ctx context.Context, typeId ResourceTypeIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUpdateResourceTypeRequestWithBody(c.Server, typeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InternalUpdateResourceType(ctx context.Context, typeId ResourceTypeIdPathParam, body InternalUpdateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInternalUpdateResourceTypeRequest(c.Server, typeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironmentTypes(ctx context.Context, orgId OrgIdPathParam, params *ListEnvironmentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentTypesRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentTypeWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentTypeRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentType(ctx context.Context, orgId OrgIdPathParam, body CreateEnvironmentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentTypeRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironmentType(ctx context.Context, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentTypeRequest(c.Server, orgId, envTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentType(ctx context.Context, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentTypeRequest(c.Server, orgId, envTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModuleProviders(ctx context.Context, orgId OrgIdPathParam, params *ListModuleProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModuleProvidersRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModuleProviderWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModuleProviderRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModuleProvider(ctx context.Context, orgId OrgIdPathParam, body CreateModuleProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModuleProviderRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModuleProvider(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModuleProviderRequest(c.Server, orgId, providerType, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModuleProvider(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModuleProviderRequest(c.Server, orgId, providerType, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateModuleProviderWithBody(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateModuleProviderRequestWithBody(c.Server, orgId, providerType, providerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateModuleProvider(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, body UpdateModuleProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateModuleProviderRequest(c.Server, orgId, providerType, providerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModuleRulesInOrg(ctx context.Context, orgId OrgIdPathParam, params *ListModuleRulesInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModuleRulesInOrgRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModuleRuleInOrgWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModuleRuleInOrgRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModuleRuleInOrg(ctx context.Context, orgId OrgIdPathParam, body CreateModuleRuleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModuleRuleInOrgRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModuleRuleInOrg(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModuleRuleInOrgRequest(c.Server, orgId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModuleRuleInOrg(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModuleRuleInOrgRequest(c.Server, orgId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModules(ctx context.Context, orgId OrgIdPathParam, params *ListModulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModulesRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModuleWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModuleRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModule(ctx context.Context, orgId OrgIdPathParam, body CreateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModuleRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteModule(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteModuleRequest(c.Server, orgId, moduleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModule(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModuleRequest(c.Server, orgId, moduleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateModuleWithBody(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateModuleRequestWithBody(c.Server, orgId, moduleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateModule(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, body UpdateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateModuleRequest(c.Server, orgId, moduleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjects(ctx context.Context, orgId OrgIdPathParam, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectsRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProject(ctx context.Context, orgId OrgIdPathParam, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProject(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectRequest(c.Server, orgId, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProject(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectRequest(c.Server, orgId, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironments(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentsRequest(c.Server, orgId, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, orgId, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequest(c.Server, orgId, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, orgId, projectId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, orgId, projectId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ForceDeleteEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewForceDeleteEnvironmentRequest(c.Server, orgId, projectId, envId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRunnerInAnEnvironment(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *UpdateRunnerInAnEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRunnerInAnEnvironmentRequest(c.Server, orgId, projectId, envId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailableResourceTypes(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *ListAvailableResourceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailableResourceTypesRequest(c.Server, orgId, projectId, envId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResourceTypes(ctx context.Context, orgId OrgIdPathParam, params *ListResourceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourceTypesRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceTypeWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceTypeRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceType(ctx context.Context, orgId OrgIdPathParam, body CreateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceTypeRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceType(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceTypeRequest(c.Server, orgId, typeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceType(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceTypeRequest(c.Server, orgId, typeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceTypeWithBody(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceTypeRequestWithBody(c.Server, orgId, typeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceType(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, body UpdateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceTypeRequest(c.Server, orgId, typeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRunnerRulesInOrg(ctx context.Context, orgId OrgIdPathParam, params *ListRunnerRulesInOrgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRunnerRulesInOrgRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRunnerRuleInOrgWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunnerRuleInOrgRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRunnerRuleInOrg(ctx context.Context, orgId OrgIdPathParam, body CreateRunnerRuleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunnerRuleInOrgRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRunnerRuleInOrg(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRunnerRuleInOrgRequest(c.Server, orgId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunnerRuleInOrg(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunnerRuleInOrgRequest(c.Server, orgId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRunners(ctx context.Context, orgId OrgIdPathParam, params *ListRunnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRunnersRequest(c.Server, orgId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRunnerWithBody(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunnerRequestWithBody(c.Server, orgId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRunner(ctx context.Context, orgId OrgIdPathParam, body CreateRunnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRunnerRequest(c.Server, orgId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRunner(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRunnerRequest(c.Server, orgId, runnerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunner(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunnerRequest(c.Server, orgId, runnerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRunnerWithBody(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRunnerRequestWithBody(c.Server, orgId, runnerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRunner(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, body UpdateRunnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRunnerRequest(c.Server, orgId, runnerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListInternalOrganizationsRequest generates requests for ListInternalOrganizations
func NewListInternalOrganizationsRequest(server string, params *ListInternalOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInternalOrganizationRequest calls the generic CreateInternalOrganization builder with application/json body
func NewCreateInternalOrganizationRequest(server string, body CreateInternalOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInternalOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInternalOrganizationRequestWithBody generates requests for CreateInternalOrganization with any type of body
func NewCreateInternalOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/orgs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInternalOrganizationRequest generates requests for GetInternalOrganization
func NewGetInternalOrganizationRequest(server string, orgId OrgIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/orgs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInternalUpdateEnvironmentRequest calls the generic InternalUpdateEnvironment builder with application/json body
func NewInternalUpdateEnvironmentRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body InternalUpdateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInternalUpdateEnvironmentRequestWithBody(server, orgId, projectId, envId, "application/json", bodyReader)
}

// NewInternalUpdateEnvironmentRequestWithBody generates requests for InternalUpdateEnvironment with any type of body
func NewInternalUpdateEnvironmentRequestWithBody(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/orgs/%s/projects/%s/envs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateInternalModuleCatalogueRequest calls the generic GenerateInternalModuleCatalogue builder with application/json body
func NewGenerateInternalModuleCatalogueRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body GenerateInternalModuleCatalogueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateInternalModuleCatalogueRequestWithBody(server, orgId, projectId, envId, "application/json", bodyReader)
}

// NewGenerateInternalModuleCatalogueRequestWithBody generates requests for GenerateInternalModuleCatalogue with any type of body
func NewGenerateInternalModuleCatalogueRequestWithBody(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/orgs/%s/projects/%s/envs/%s/module-catalogue", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInternalRunnerRequest generates requests for GetInternalRunner
func NewGetInternalRunnerRequest(server string, orgId OrgIdPathParam, runnerId RunnerIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "runnerId", runtime.ParamLocationPath, runnerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/orgs/%s/runners/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInternalListResourceTypesRequest generates requests for InternalListResourceTypes
func NewInternalListResourceTypesRequest(server string, params *InternalListResourceTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/resource-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInternalCreateResourceTypeRequest calls the generic InternalCreateResourceType builder with application/json body
func NewInternalCreateResourceTypeRequest(server string, body InternalCreateResourceTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInternalCreateResourceTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewInternalCreateResourceTypeRequestWithBody generates requests for InternalCreateResourceType with any type of body
func NewInternalCreateResourceTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/resource-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInternalDeleteResourceTypeRequest generates requests for InternalDeleteResourceType
func NewInternalDeleteResourceTypeRequest(server string, typeId ResourceTypeIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/resource-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInternalUpdateResourceTypeRequest calls the generic InternalUpdateResourceType builder with application/json body
func NewInternalUpdateResourceTypeRequest(server string, typeId ResourceTypeIdPathParam, body InternalUpdateResourceTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInternalUpdateResourceTypeRequestWithBody(server, typeId, "application/json", bodyReader)
}

// NewInternalUpdateResourceTypeRequestWithBody generates requests for InternalUpdateResourceType with any type of body
func NewInternalUpdateResourceTypeRequestWithBody(server string, typeId ResourceTypeIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/resource-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentTypesRequest generates requests for ListEnvironmentTypes
func NewListEnvironmentTypesRequest(server string, orgId OrgIdPathParam, params *ListEnvironmentTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentTypeRequest calls the generic CreateEnvironmentType builder with application/json body
func NewCreateEnvironmentTypeRequest(server string, orgId OrgIdPathParam, body CreateEnvironmentTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentTypeRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateEnvironmentTypeRequestWithBody generates requests for CreateEnvironmentType with any type of body
func NewCreateEnvironmentTypeRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentTypeRequest generates requests for DeleteEnvironmentType
func NewDeleteEnvironmentTypeRequest(server string, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envTypeId", runtime.ParamLocationPath, envTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentTypeRequest generates requests for GetEnvironmentType
func NewGetEnvironmentTypeRequest(server string, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "envTypeId", runtime.ParamLocationPath, envTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/env-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModuleProvidersRequest generates requests for ListModuleProviders
func NewListModuleProvidersRequest(server string, orgId OrgIdPathParam, params *ListModuleProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/module-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByProviderType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byProviderType", runtime.ParamLocationQuery, *params.ByProviderType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateModuleProviderRequest calls the generic CreateModuleProvider builder with application/json body
func NewCreateModuleProviderRequest(server string, orgId OrgIdPathParam, body CreateModuleProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateModuleProviderRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateModuleProviderRequestWithBody generates requests for CreateModuleProvider with any type of body
func NewCreateModuleProviderRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/module-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteModuleProviderRequest generates requests for DeleteModuleProvider
func NewDeleteModuleProviderRequest(server string, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "providerType", runtime.ParamLocationPath, providerType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/module-providers/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModuleProviderRequest generates requests for GetModuleProvider
func NewGetModuleProviderRequest(server string, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "providerType", runtime.ParamLocationPath, providerType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/module-providers/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateModuleProviderRequest calls the generic UpdateModuleProvider builder with application/json body
func NewUpdateModuleProviderRequest(server string, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, body UpdateModuleProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateModuleProviderRequestWithBody(server, orgId, providerType, providerId, "application/json", bodyReader)
}

// NewUpdateModuleProviderRequestWithBody generates requests for UpdateModuleProvider with any type of body
func NewUpdateModuleProviderRequestWithBody(server string, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "providerType", runtime.ParamLocationPath, providerType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/module-providers/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListModuleRulesInOrgRequest generates requests for ListModuleRulesInOrg
func NewListModuleRulesInOrgRequest(server string, orgId OrgIdPathParam, params *ListModuleRulesInOrgParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/module-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByResourceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byResourceType", runtime.ParamLocationQuery, *params.ByResourceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByModuleId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byModuleId", runtime.ParamLocationQuery, *params.ByModuleId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateModuleRuleInOrgRequest calls the generic CreateModuleRuleInOrg builder with application/json body
func NewCreateModuleRuleInOrgRequest(server string, orgId OrgIdPathParam, body CreateModuleRuleInOrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateModuleRuleInOrgRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateModuleRuleInOrgRequestWithBody generates requests for CreateModuleRuleInOrg with any type of body
func NewCreateModuleRuleInOrgRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/module-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteModuleRuleInOrgRequest generates requests for DeleteModuleRuleInOrg
func NewDeleteModuleRuleInOrgRequest(server string, orgId OrgIdPathParam, ruleId RuleIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/module-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModuleRuleInOrgRequest generates requests for GetModuleRuleInOrg
func NewGetModuleRuleInOrgRequest(server string, orgId OrgIdPathParam, ruleId RuleIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/module-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModulesRequest generates requests for ListModules
func NewListModulesRequest(server string, orgId OrgIdPathParam, params *ListModulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/modules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByResourceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byResourceType", runtime.ParamLocationQuery, *params.ByResourceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateModuleRequest calls the generic CreateModule builder with application/json body
func NewCreateModuleRequest(server string, orgId OrgIdPathParam, body CreateModuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateModuleRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateModuleRequestWithBody generates requests for CreateModule with any type of body
func NewCreateModuleRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/modules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteModuleRequest generates requests for DeleteModule
func NewDeleteModuleRequest(server string, orgId OrgIdPathParam, moduleId ModuleIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "moduleId", runtime.ParamLocationPath, moduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/modules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetModuleRequest generates requests for GetModule
func NewGetModuleRequest(server string, orgId OrgIdPathParam, moduleId ModuleIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "moduleId", runtime.ParamLocationPath, moduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/modules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateModuleRequest calls the generic UpdateModule builder with application/json body
func NewUpdateModuleRequest(server string, orgId OrgIdPathParam, moduleId ModuleIdPathParam, body UpdateModuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateModuleRequestWithBody(server, orgId, moduleId, "application/json", bodyReader)
}

// NewUpdateModuleRequestWithBody generates requests for UpdateModule with any type of body
func NewUpdateModuleRequestWithBody(server string, orgId OrgIdPathParam, moduleId ModuleIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "moduleId", runtime.ParamLocationPath, moduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/modules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListProjectsRequest generates requests for ListProjects
func NewListProjectsRequest(server string, orgId OrgIdPathParam, params *ListProjectsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectRequest calls the generic CreateProject builder with application/json body
func NewCreateProjectRequest(server string, orgId OrgIdPathParam, body CreateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateProjectRequestWithBody generates requests for CreateProject with any type of body
func NewCreateProjectRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectRequest generates requests for DeleteProject
func NewDeleteProjectRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectRequest generates requests for GetProject
func NewGetProjectRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEnvironmentsRequest generates requests for ListEnvironments
func NewListEnvironmentsRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, params *ListEnvironmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects/%s/envs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByEnvTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byEnvTypeId", runtime.ParamLocationQuery, *params.ByEnvTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequest calls the generic CreateEnvironment builder with application/json body
func NewCreateEnvironmentRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, body CreateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, orgId, projectId, "application/json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects/%s/envs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects/%s/envs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects/%s/envs/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewForceDeleteEnvironmentRequest generates requests for ForceDeleteEnvironment
func NewForceDeleteEnvironmentRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects/%s/envs/%s/actions/force_delete", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRunnerInAnEnvironmentRequest generates requests for UpdateRunnerInAnEnvironment
func NewUpdateRunnerInAnEnvironmentRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *UpdateRunnerInAnEnvironmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects/%s/envs/%s/actions/refresh_runner", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DryRun != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dry_run", runtime.ParamLocationQuery, *params.DryRun); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAvailableResourceTypesRequest generates requests for ListAvailableResourceTypes
func NewListAvailableResourceTypesRequest(server string, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *ListAvailableResourceTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envId", runtime.ParamLocationPath, envId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/projects/%s/envs/%s/available-resource-types", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type_id", runtime.ParamLocationQuery, *params.TypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeNonDeveloperAccessible != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_non_developer_accessible", runtime.ParamLocationQuery, *params.IncludeNonDeveloperAccessible); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListResourceTypesRequest generates requests for ListResourceTypes
func NewListResourceTypesRequest(server string, orgId OrgIdPathParam, params *ListResourceTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resource-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResourceTypeRequest calls the generic CreateResourceType builder with application/json body
func NewCreateResourceTypeRequest(server string, orgId OrgIdPathParam, body CreateResourceTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceTypeRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateResourceTypeRequestWithBody generates requests for CreateResourceType with any type of body
func NewCreateResourceTypeRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resource-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceTypeRequest generates requests for DeleteResourceType
func NewDeleteResourceTypeRequest(server string, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resource-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceTypeRequest generates requests for GetResourceType
func NewGetResourceTypeRequest(server string, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resource-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateResourceTypeRequest calls the generic UpdateResourceType builder with application/json body
func NewUpdateResourceTypeRequest(server string, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, body UpdateResourceTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResourceTypeRequestWithBody(server, orgId, typeId, "application/json", bodyReader)
}

// NewUpdateResourceTypeRequestWithBody generates requests for UpdateResourceType with any type of body
func NewUpdateResourceTypeRequestWithBody(server string, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/resource-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRunnerRulesInOrgRequest generates requests for ListRunnerRulesInOrg
func NewListRunnerRulesInOrgRequest(server string, orgId OrgIdPathParam, params *ListRunnerRulesInOrgParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/runner-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byProjectId", runtime.ParamLocationQuery, *params.ByProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByEnvTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byEnvTypeId", runtime.ParamLocationQuery, *params.ByEnvTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByRunnerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byRunnerId", runtime.ParamLocationQuery, *params.ByRunnerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRunnerRuleInOrgRequest calls the generic CreateRunnerRuleInOrg builder with application/json body
func NewCreateRunnerRuleInOrgRequest(server string, orgId OrgIdPathParam, body CreateRunnerRuleInOrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRunnerRuleInOrgRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateRunnerRuleInOrgRequestWithBody generates requests for CreateRunnerRuleInOrg with any type of body
func NewCreateRunnerRuleInOrgRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/runner-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRunnerRuleInOrgRequest generates requests for DeleteRunnerRuleInOrg
func NewDeleteRunnerRuleInOrgRequest(server string, orgId OrgIdPathParam, ruleId RuleIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/runner-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunnerRuleInOrgRequest generates requests for GetRunnerRuleInOrg
func NewGetRunnerRuleInOrgRequest(server string, orgId OrgIdPathParam, ruleId RuleIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/runner-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRunnersRequest generates requests for ListRunners
func NewListRunnersRequest(server string, orgId OrgIdPathParam, params *ListRunnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/runners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByRunnerType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byRunnerType", runtime.ParamLocationQuery, *params.ByRunnerType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRunnerRequest calls the generic CreateRunner builder with application/json body
func NewCreateRunnerRequest(server string, orgId OrgIdPathParam, body CreateRunnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRunnerRequestWithBody(server, orgId, "application/json", bodyReader)
}

// NewCreateRunnerRequestWithBody generates requests for CreateRunner with any type of body
func NewCreateRunnerRequestWithBody(server string, orgId OrgIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/runners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRunnerRequest generates requests for DeleteRunner
func NewDeleteRunnerRequest(server string, orgId OrgIdPathParam, runnerId RunnerIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "runnerId", runtime.ParamLocationPath, runnerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/runners/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunnerRequest generates requests for GetRunner
func NewGetRunnerRequest(server string, orgId OrgIdPathParam, runnerId RunnerIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "runnerId", runtime.ParamLocationPath, runnerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/runners/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRunnerRequest calls the generic UpdateRunner builder with application/json body
func NewUpdateRunnerRequest(server string, orgId OrgIdPathParam, runnerId RunnerIdPathParam, body UpdateRunnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRunnerRequestWithBody(server, orgId, runnerId, "application/json", bodyReader)
}

// NewUpdateRunnerRequestWithBody generates requests for UpdateRunner with any type of body
func NewUpdateRunnerRequestWithBody(server string, orgId OrgIdPathParam, runnerId RunnerIdPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgId", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "runnerId", runtime.ParamLocationPath, runnerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orgs/%s/runners/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListInternalOrganizationsWithResponse request
	ListInternalOrganizationsWithResponse(ctx context.Context, params *ListInternalOrganizationsParams, reqEditors ...RequestEditorFn) (*ListInternalOrganizationsResponse, error)

	// CreateInternalOrganizationWithBodyWithResponse request with any body
	CreateInternalOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInternalOrganizationResponse, error)

	CreateInternalOrganizationWithResponse(ctx context.Context, body CreateInternalOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInternalOrganizationResponse, error)

	// GetInternalOrganizationWithResponse request
	GetInternalOrganizationWithResponse(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*GetInternalOrganizationResponse, error)

	// InternalUpdateEnvironmentWithBodyWithResponse request with any body
	InternalUpdateEnvironmentWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUpdateEnvironmentResponse, error)

	InternalUpdateEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body InternalUpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*InternalUpdateEnvironmentResponse, error)

	// GenerateInternalModuleCatalogueWithBodyWithResponse request with any body
	GenerateInternalModuleCatalogueWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateInternalModuleCatalogueResponse, error)

	GenerateInternalModuleCatalogueWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body GenerateInternalModuleCatalogueJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateInternalModuleCatalogueResponse, error)

	// GetInternalRunnerWithResponse request
	GetInternalRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*GetInternalRunnerResponse, error)

	// InternalListResourceTypesWithResponse request
	InternalListResourceTypesWithResponse(ctx context.Context, params *InternalListResourceTypesParams, reqEditors ...RequestEditorFn) (*InternalListResourceTypesResponse, error)

	// InternalCreateResourceTypeWithBodyWithResponse request with any body
	InternalCreateResourceTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalCreateResourceTypeResponse, error)

	InternalCreateResourceTypeWithResponse(ctx context.Context, body InternalCreateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*InternalCreateResourceTypeResponse, error)

	// InternalDeleteResourceTypeWithResponse request
	InternalDeleteResourceTypeWithResponse(ctx context.Context, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*InternalDeleteResourceTypeResponse, error)

	// InternalUpdateResourceTypeWithBodyWithResponse request with any body
	InternalUpdateResourceTypeWithBodyWithResponse(ctx context.Context, typeId ResourceTypeIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUpdateResourceTypeResponse, error)

	InternalUpdateResourceTypeWithResponse(ctx context.Context, typeId ResourceTypeIdPathParam, body InternalUpdateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*InternalUpdateResourceTypeResponse, error)

	// ListEnvironmentTypesWithResponse request
	ListEnvironmentTypesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListEnvironmentTypesParams, reqEditors ...RequestEditorFn) (*ListEnvironmentTypesResponse, error)

	// CreateEnvironmentTypeWithBodyWithResponse request with any body
	CreateEnvironmentTypeWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentTypeResponse, error)

	CreateEnvironmentTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateEnvironmentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentTypeResponse, error)

	// DeleteEnvironmentTypeWithResponse request
	DeleteEnvironmentTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam, reqEditors ...RequestEditorFn) (*DeleteEnvironmentTypeResponse, error)

	// GetEnvironmentTypeWithResponse request
	GetEnvironmentTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam, reqEditors ...RequestEditorFn) (*GetEnvironmentTypeResponse, error)

	// ListModuleProvidersWithResponse request
	ListModuleProvidersWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListModuleProvidersParams, reqEditors ...RequestEditorFn) (*ListModuleProvidersResponse, error)

	// CreateModuleProviderWithBodyWithResponse request with any body
	CreateModuleProviderWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModuleProviderResponse, error)

	CreateModuleProviderWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateModuleProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModuleProviderResponse, error)

	// DeleteModuleProviderWithResponse request
	DeleteModuleProviderWithResponse(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, reqEditors ...RequestEditorFn) (*DeleteModuleProviderResponse, error)

	// GetModuleProviderWithResponse request
	GetModuleProviderWithResponse(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, reqEditors ...RequestEditorFn) (*GetModuleProviderResponse, error)

	// UpdateModuleProviderWithBodyWithResponse request with any body
	UpdateModuleProviderWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateModuleProviderResponse, error)

	UpdateModuleProviderWithResponse(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, body UpdateModuleProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateModuleProviderResponse, error)

	// ListModuleRulesInOrgWithResponse request
	ListModuleRulesInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListModuleRulesInOrgParams, reqEditors ...RequestEditorFn) (*ListModuleRulesInOrgResponse, error)

	// CreateModuleRuleInOrgWithBodyWithResponse request with any body
	CreateModuleRuleInOrgWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModuleRuleInOrgResponse, error)

	CreateModuleRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateModuleRuleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModuleRuleInOrgResponse, error)

	// DeleteModuleRuleInOrgWithResponse request
	DeleteModuleRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*DeleteModuleRuleInOrgResponse, error)

	// GetModuleRuleInOrgWithResponse request
	GetModuleRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*GetModuleRuleInOrgResponse, error)

	// ListModulesWithResponse request
	ListModulesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListModulesParams, reqEditors ...RequestEditorFn) (*ListModulesResponse, error)

	// CreateModuleWithBodyWithResponse request with any body
	CreateModuleWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModuleResponse, error)

	CreateModuleWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModuleResponse, error)

	// DeleteModuleWithResponse request
	DeleteModuleWithResponse(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, reqEditors ...RequestEditorFn) (*DeleteModuleResponse, error)

	// GetModuleWithResponse request
	GetModuleWithResponse(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, reqEditors ...RequestEditorFn) (*GetModuleResponse, error)

	// UpdateModuleWithBodyWithResponse request with any body
	UpdateModuleWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateModuleResponse, error)

	UpdateModuleWithResponse(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, body UpdateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateModuleResponse, error)

	// ListProjectsWithResponse request
	ListProjectsWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*ListProjectsResponse, error)

	// CreateProjectWithBodyWithResponse request with any body
	CreateProjectWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	CreateProjectWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	// DeleteProjectWithResponse request
	DeleteProjectWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error)

	// GetProjectWithResponse request
	GetProjectWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, reqEditors ...RequestEditorFn) (*GetProjectResponse, error)

	// ListEnvironmentsWithResponse request
	ListEnvironmentsWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error)

	// CreateEnvironmentWithBodyWithResponse request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironmentWithResponse request
	DeleteEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// ForceDeleteEnvironmentWithResponse request
	ForceDeleteEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*ForceDeleteEnvironmentResponse, error)

	// UpdateRunnerInAnEnvironmentWithResponse request
	UpdateRunnerInAnEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *UpdateRunnerInAnEnvironmentParams, reqEditors ...RequestEditorFn) (*UpdateRunnerInAnEnvironmentResponse, error)

	// ListAvailableResourceTypesWithResponse request
	ListAvailableResourceTypesWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *ListAvailableResourceTypesParams, reqEditors ...RequestEditorFn) (*ListAvailableResourceTypesResponse, error)

	// ListResourceTypesWithResponse request
	ListResourceTypesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListResourceTypesParams, reqEditors ...RequestEditorFn) (*ListResourceTypesResponse, error)

	// CreateResourceTypeWithBodyWithResponse request with any body
	CreateResourceTypeWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceTypeResponse, error)

	CreateResourceTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceTypeResponse, error)

	// DeleteResourceTypeWithResponse request
	DeleteResourceTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*DeleteResourceTypeResponse, error)

	// GetResourceTypeWithResponse request
	GetResourceTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*GetResourceTypeResponse, error)

	// UpdateResourceTypeWithBodyWithResponse request with any body
	UpdateResourceTypeWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceTypeResponse, error)

	UpdateResourceTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, body UpdateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceTypeResponse, error)

	// ListRunnerRulesInOrgWithResponse request
	ListRunnerRulesInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListRunnerRulesInOrgParams, reqEditors ...RequestEditorFn) (*ListRunnerRulesInOrgResponse, error)

	// CreateRunnerRuleInOrgWithBodyWithResponse request with any body
	CreateRunnerRuleInOrgWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunnerRuleInOrgResponse, error)

	CreateRunnerRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateRunnerRuleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunnerRuleInOrgResponse, error)

	// DeleteRunnerRuleInOrgWithResponse request
	DeleteRunnerRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*DeleteRunnerRuleInOrgResponse, error)

	// GetRunnerRuleInOrgWithResponse request
	GetRunnerRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*GetRunnerRuleInOrgResponse, error)

	// ListRunnersWithResponse request
	ListRunnersWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListRunnersParams, reqEditors ...RequestEditorFn) (*ListRunnersResponse, error)

	// CreateRunnerWithBodyWithResponse request with any body
	CreateRunnerWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunnerResponse, error)

	CreateRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateRunnerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunnerResponse, error)

	// DeleteRunnerWithResponse request
	DeleteRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*DeleteRunnerResponse, error)

	// GetRunnerWithResponse request
	GetRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*GetRunnerResponse, error)

	// UpdateRunnerWithBodyWithResponse request with any body
	UpdateRunnerWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRunnerResponse, error)

	UpdateRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, body UpdateRunnerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRunnerResponse, error)
}

type ListInternalOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InternalOrganizationPage
}

// Status returns HTTPResponse.Status
func (r ListInternalOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInternalOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInternalOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InternalOrganization
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateInternalOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInternalOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInternalOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InternalOrganization
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetInternalOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInternalOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalUpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r InternalUpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalUpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateInternalModuleCatalogueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InternalModuleCatalogue
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GenerateInternalModuleCatalogueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateInternalModuleCatalogueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInternalRunnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InternalRunner
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetInternalRunnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInternalRunnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalListResourceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceTypePage
}

// Status returns HTTPResponse.Status
func (r InternalListResourceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalListResourceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalCreateResourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ResourceType
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r InternalCreateResourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalCreateResourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalDeleteResourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r InternalDeleteResourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalDeleteResourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InternalUpdateResourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceType
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r InternalUpdateResourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InternalUpdateResourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentTypePage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EnvironmentType
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentType
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModuleProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModuleProviderPage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListModuleProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModuleProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateModuleProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ModuleProvider
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateModuleProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateModuleProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModuleProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r DeleteModuleProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModuleProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModuleProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModuleProvider
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetModuleProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModuleProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateModuleProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModuleProvider
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r UpdateModuleProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateModuleProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModuleRulesInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RulePage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListModuleRulesInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModuleRulesInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateModuleRuleInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Rule
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateModuleRuleInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateModuleRuleInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModuleRuleInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r DeleteModuleRuleInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModuleRuleInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModuleRuleInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Rule
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetModuleRuleInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModuleRuleInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModulePage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListModulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateModuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Module
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateModuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateModuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteModuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r DeleteModuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteModuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Module
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetModuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateModuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Module
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r UpdateModuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateModuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectPage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r DeleteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentPage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Environment
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Environment
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ForceDeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r ForceDeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ForceDeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRunnerInAnEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefreshRunnerActionResult
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r UpdateRunnerInAnEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRunnerInAnEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailableResourceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AvailableResourceTypePage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListAvailableResourceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailableResourceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceTypePage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListResourceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ResourceType
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateResourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r DeleteResourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceType
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetResourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceType
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r UpdateResourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRunnerRulesInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RunnerRulePage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListRunnerRulesInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRunnerRulesInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRunnerRuleInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RunnerRule
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateRunnerRuleInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRunnerRuleInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRunnerRuleInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r DeleteRunnerRuleInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRunnerRuleInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunnerRuleInOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RunnerRule
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetRunnerRuleInOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunnerRuleInOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRunnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RunnerPage
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r ListRunnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRunnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRunnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Runner
	JSON400      *N400BadRequest
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r CreateRunnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRunnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRunnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r DeleteRunnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRunnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Runner
	JSON404      *N404NotFound
}

// Status returns HTTPResponse.Status
func (r GetRunnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRunnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Runner
	JSON400      *N400BadRequest
	JSON404      *N404NotFound
	JSON409      *N409Conflict
}

// Status returns HTTPResponse.Status
func (r UpdateRunnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRunnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListInternalOrganizationsWithResponse request returning *ListInternalOrganizationsResponse
func (c *ClientWithResponses) ListInternalOrganizationsWithResponse(ctx context.Context, params *ListInternalOrganizationsParams, reqEditors ...RequestEditorFn) (*ListInternalOrganizationsResponse, error) {
	rsp, err := c.ListInternalOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInternalOrganizationsResponse(rsp)
}

// CreateInternalOrganizationWithBodyWithResponse request with arbitrary body returning *CreateInternalOrganizationResponse
func (c *ClientWithResponses) CreateInternalOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInternalOrganizationResponse, error) {
	rsp, err := c.CreateInternalOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInternalOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateInternalOrganizationWithResponse(ctx context.Context, body CreateInternalOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInternalOrganizationResponse, error) {
	rsp, err := c.CreateInternalOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInternalOrganizationResponse(rsp)
}

// GetInternalOrganizationWithResponse request returning *GetInternalOrganizationResponse
func (c *ClientWithResponses) GetInternalOrganizationWithResponse(ctx context.Context, orgId OrgIdPathParam, reqEditors ...RequestEditorFn) (*GetInternalOrganizationResponse, error) {
	rsp, err := c.GetInternalOrganization(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInternalOrganizationResponse(rsp)
}

// InternalUpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *InternalUpdateEnvironmentResponse
func (c *ClientWithResponses) InternalUpdateEnvironmentWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUpdateEnvironmentResponse, error) {
	rsp, err := c.InternalUpdateEnvironmentWithBody(ctx, orgId, projectId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUpdateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) InternalUpdateEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body InternalUpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*InternalUpdateEnvironmentResponse, error) {
	rsp, err := c.InternalUpdateEnvironment(ctx, orgId, projectId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUpdateEnvironmentResponse(rsp)
}

// GenerateInternalModuleCatalogueWithBodyWithResponse request with arbitrary body returning *GenerateInternalModuleCatalogueResponse
func (c *ClientWithResponses) GenerateInternalModuleCatalogueWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateInternalModuleCatalogueResponse, error) {
	rsp, err := c.GenerateInternalModuleCatalogueWithBody(ctx, orgId, projectId, envId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateInternalModuleCatalogueResponse(rsp)
}

func (c *ClientWithResponses) GenerateInternalModuleCatalogueWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, body GenerateInternalModuleCatalogueJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateInternalModuleCatalogueResponse, error) {
	rsp, err := c.GenerateInternalModuleCatalogue(ctx, orgId, projectId, envId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateInternalModuleCatalogueResponse(rsp)
}

// GetInternalRunnerWithResponse request returning *GetInternalRunnerResponse
func (c *ClientWithResponses) GetInternalRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*GetInternalRunnerResponse, error) {
	rsp, err := c.GetInternalRunner(ctx, orgId, runnerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInternalRunnerResponse(rsp)
}

// InternalListResourceTypesWithResponse request returning *InternalListResourceTypesResponse
func (c *ClientWithResponses) InternalListResourceTypesWithResponse(ctx context.Context, params *InternalListResourceTypesParams, reqEditors ...RequestEditorFn) (*InternalListResourceTypesResponse, error) {
	rsp, err := c.InternalListResourceTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalListResourceTypesResponse(rsp)
}

// InternalCreateResourceTypeWithBodyWithResponse request with arbitrary body returning *InternalCreateResourceTypeResponse
func (c *ClientWithResponses) InternalCreateResourceTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalCreateResourceTypeResponse, error) {
	rsp, err := c.InternalCreateResourceTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalCreateResourceTypeResponse(rsp)
}

func (c *ClientWithResponses) InternalCreateResourceTypeWithResponse(ctx context.Context, body InternalCreateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*InternalCreateResourceTypeResponse, error) {
	rsp, err := c.InternalCreateResourceType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalCreateResourceTypeResponse(rsp)
}

// InternalDeleteResourceTypeWithResponse request returning *InternalDeleteResourceTypeResponse
func (c *ClientWithResponses) InternalDeleteResourceTypeWithResponse(ctx context.Context, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*InternalDeleteResourceTypeResponse, error) {
	rsp, err := c.InternalDeleteResourceType(ctx, typeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalDeleteResourceTypeResponse(rsp)
}

// InternalUpdateResourceTypeWithBodyWithResponse request with arbitrary body returning *InternalUpdateResourceTypeResponse
func (c *ClientWithResponses) InternalUpdateResourceTypeWithBodyWithResponse(ctx context.Context, typeId ResourceTypeIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InternalUpdateResourceTypeResponse, error) {
	rsp, err := c.InternalUpdateResourceTypeWithBody(ctx, typeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUpdateResourceTypeResponse(rsp)
}

func (c *ClientWithResponses) InternalUpdateResourceTypeWithResponse(ctx context.Context, typeId ResourceTypeIdPathParam, body InternalUpdateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*InternalUpdateResourceTypeResponse, error) {
	rsp, err := c.InternalUpdateResourceType(ctx, typeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInternalUpdateResourceTypeResponse(rsp)
}

// ListEnvironmentTypesWithResponse request returning *ListEnvironmentTypesResponse
func (c *ClientWithResponses) ListEnvironmentTypesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListEnvironmentTypesParams, reqEditors ...RequestEditorFn) (*ListEnvironmentTypesResponse, error) {
	rsp, err := c.ListEnvironmentTypes(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentTypesResponse(rsp)
}

// CreateEnvironmentTypeWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentTypeResponse
func (c *ClientWithResponses) CreateEnvironmentTypeWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentTypeResponse, error) {
	rsp, err := c.CreateEnvironmentTypeWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateEnvironmentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentTypeResponse, error) {
	rsp, err := c.CreateEnvironmentType(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentTypeResponse(rsp)
}

// DeleteEnvironmentTypeWithResponse request returning *DeleteEnvironmentTypeResponse
func (c *ClientWithResponses) DeleteEnvironmentTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam, reqEditors ...RequestEditorFn) (*DeleteEnvironmentTypeResponse, error) {
	rsp, err := c.DeleteEnvironmentType(ctx, orgId, envTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentTypeResponse(rsp)
}

// GetEnvironmentTypeWithResponse request returning *GetEnvironmentTypeResponse
func (c *ClientWithResponses) GetEnvironmentTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, envTypeId EnvTypeIdPathParam, reqEditors ...RequestEditorFn) (*GetEnvironmentTypeResponse, error) {
	rsp, err := c.GetEnvironmentType(ctx, orgId, envTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentTypeResponse(rsp)
}

// ListModuleProvidersWithResponse request returning *ListModuleProvidersResponse
func (c *ClientWithResponses) ListModuleProvidersWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListModuleProvidersParams, reqEditors ...RequestEditorFn) (*ListModuleProvidersResponse, error) {
	rsp, err := c.ListModuleProviders(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModuleProvidersResponse(rsp)
}

// CreateModuleProviderWithBodyWithResponse request with arbitrary body returning *CreateModuleProviderResponse
func (c *ClientWithResponses) CreateModuleProviderWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModuleProviderResponse, error) {
	rsp, err := c.CreateModuleProviderWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModuleProviderResponse(rsp)
}

func (c *ClientWithResponses) CreateModuleProviderWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateModuleProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModuleProviderResponse, error) {
	rsp, err := c.CreateModuleProvider(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModuleProviderResponse(rsp)
}

// DeleteModuleProviderWithResponse request returning *DeleteModuleProviderResponse
func (c *ClientWithResponses) DeleteModuleProviderWithResponse(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, reqEditors ...RequestEditorFn) (*DeleteModuleProviderResponse, error) {
	rsp, err := c.DeleteModuleProvider(ctx, orgId, providerType, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModuleProviderResponse(rsp)
}

// GetModuleProviderWithResponse request returning *GetModuleProviderResponse
func (c *ClientWithResponses) GetModuleProviderWithResponse(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, reqEditors ...RequestEditorFn) (*GetModuleProviderResponse, error) {
	rsp, err := c.GetModuleProvider(ctx, orgId, providerType, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModuleProviderResponse(rsp)
}

// UpdateModuleProviderWithBodyWithResponse request with arbitrary body returning *UpdateModuleProviderResponse
func (c *ClientWithResponses) UpdateModuleProviderWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateModuleProviderResponse, error) {
	rsp, err := c.UpdateModuleProviderWithBody(ctx, orgId, providerType, providerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateModuleProviderResponse(rsp)
}

func (c *ClientWithResponses) UpdateModuleProviderWithResponse(ctx context.Context, orgId OrgIdPathParam, providerType ProviderTypePathParam, providerId ProviderIdPathParam, body UpdateModuleProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateModuleProviderResponse, error) {
	rsp, err := c.UpdateModuleProvider(ctx, orgId, providerType, providerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateModuleProviderResponse(rsp)
}

// ListModuleRulesInOrgWithResponse request returning *ListModuleRulesInOrgResponse
func (c *ClientWithResponses) ListModuleRulesInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListModuleRulesInOrgParams, reqEditors ...RequestEditorFn) (*ListModuleRulesInOrgResponse, error) {
	rsp, err := c.ListModuleRulesInOrg(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModuleRulesInOrgResponse(rsp)
}

// CreateModuleRuleInOrgWithBodyWithResponse request with arbitrary body returning *CreateModuleRuleInOrgResponse
func (c *ClientWithResponses) CreateModuleRuleInOrgWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModuleRuleInOrgResponse, error) {
	rsp, err := c.CreateModuleRuleInOrgWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModuleRuleInOrgResponse(rsp)
}

func (c *ClientWithResponses) CreateModuleRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateModuleRuleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModuleRuleInOrgResponse, error) {
	rsp, err := c.CreateModuleRuleInOrg(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModuleRuleInOrgResponse(rsp)
}

// DeleteModuleRuleInOrgWithResponse request returning *DeleteModuleRuleInOrgResponse
func (c *ClientWithResponses) DeleteModuleRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*DeleteModuleRuleInOrgResponse, error) {
	rsp, err := c.DeleteModuleRuleInOrg(ctx, orgId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModuleRuleInOrgResponse(rsp)
}

// GetModuleRuleInOrgWithResponse request returning *GetModuleRuleInOrgResponse
func (c *ClientWithResponses) GetModuleRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*GetModuleRuleInOrgResponse, error) {
	rsp, err := c.GetModuleRuleInOrg(ctx, orgId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModuleRuleInOrgResponse(rsp)
}

// ListModulesWithResponse request returning *ListModulesResponse
func (c *ClientWithResponses) ListModulesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListModulesParams, reqEditors ...RequestEditorFn) (*ListModulesResponse, error) {
	rsp, err := c.ListModules(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModulesResponse(rsp)
}

// CreateModuleWithBodyWithResponse request with arbitrary body returning *CreateModuleResponse
func (c *ClientWithResponses) CreateModuleWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModuleResponse, error) {
	rsp, err := c.CreateModuleWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModuleResponse(rsp)
}

func (c *ClientWithResponses) CreateModuleWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModuleResponse, error) {
	rsp, err := c.CreateModule(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModuleResponse(rsp)
}

// DeleteModuleWithResponse request returning *DeleteModuleResponse
func (c *ClientWithResponses) DeleteModuleWithResponse(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, reqEditors ...RequestEditorFn) (*DeleteModuleResponse, error) {
	rsp, err := c.DeleteModule(ctx, orgId, moduleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteModuleResponse(rsp)
}

// GetModuleWithResponse request returning *GetModuleResponse
func (c *ClientWithResponses) GetModuleWithResponse(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, reqEditors ...RequestEditorFn) (*GetModuleResponse, error) {
	rsp, err := c.GetModule(ctx, orgId, moduleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModuleResponse(rsp)
}

// UpdateModuleWithBodyWithResponse request with arbitrary body returning *UpdateModuleResponse
func (c *ClientWithResponses) UpdateModuleWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateModuleResponse, error) {
	rsp, err := c.UpdateModuleWithBody(ctx, orgId, moduleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateModuleResponse(rsp)
}

func (c *ClientWithResponses) UpdateModuleWithResponse(ctx context.Context, orgId OrgIdPathParam, moduleId ModuleIdPathParam, body UpdateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateModuleResponse, error) {
	rsp, err := c.UpdateModule(ctx, orgId, moduleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateModuleResponse(rsp)
}

// ListProjectsWithResponse request returning *ListProjectsResponse
func (c *ClientWithResponses) ListProjectsWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*ListProjectsResponse, error) {
	rsp, err := c.ListProjects(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectsResponse(rsp)
}

// CreateProjectWithBodyWithResponse request with arbitrary body returning *CreateProjectResponse
func (c *ClientWithResponses) CreateProjectWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProjectWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProject(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

// DeleteProjectWithResponse request returning *DeleteProjectResponse
func (c *ClientWithResponses) DeleteProjectWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error) {
	rsp, err := c.DeleteProject(ctx, orgId, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectResponse(rsp)
}

// GetProjectWithResponse request returning *GetProjectResponse
func (c *ClientWithResponses) GetProjectWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, reqEditors ...RequestEditorFn) (*GetProjectResponse, error) {
	rsp, err := c.GetProject(ctx, orgId, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectResponse(rsp)
}

// ListEnvironmentsWithResponse request returning *ListEnvironmentsResponse
func (c *ClientWithResponses) ListEnvironmentsWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, params *ListEnvironmentsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentsResponse, error) {
	rsp, err := c.ListEnvironments(ctx, orgId, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, orgId, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironment(ctx, orgId, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, orgId, projectId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, orgId, projectId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// ForceDeleteEnvironmentWithResponse request returning *ForceDeleteEnvironmentResponse
func (c *ClientWithResponses) ForceDeleteEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, reqEditors ...RequestEditorFn) (*ForceDeleteEnvironmentResponse, error) {
	rsp, err := c.ForceDeleteEnvironment(ctx, orgId, projectId, envId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseForceDeleteEnvironmentResponse(rsp)
}

// UpdateRunnerInAnEnvironmentWithResponse request returning *UpdateRunnerInAnEnvironmentResponse
func (c *ClientWithResponses) UpdateRunnerInAnEnvironmentWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *UpdateRunnerInAnEnvironmentParams, reqEditors ...RequestEditorFn) (*UpdateRunnerInAnEnvironmentResponse, error) {
	rsp, err := c.UpdateRunnerInAnEnvironment(ctx, orgId, projectId, envId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRunnerInAnEnvironmentResponse(rsp)
}

// ListAvailableResourceTypesWithResponse request returning *ListAvailableResourceTypesResponse
func (c *ClientWithResponses) ListAvailableResourceTypesWithResponse(ctx context.Context, orgId OrgIdPathParam, projectId ProjectIdPathParam, envId EnvIdPathParam, params *ListAvailableResourceTypesParams, reqEditors ...RequestEditorFn) (*ListAvailableResourceTypesResponse, error) {
	rsp, err := c.ListAvailableResourceTypes(ctx, orgId, projectId, envId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailableResourceTypesResponse(rsp)
}

// ListResourceTypesWithResponse request returning *ListResourceTypesResponse
func (c *ClientWithResponses) ListResourceTypesWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListResourceTypesParams, reqEditors ...RequestEditorFn) (*ListResourceTypesResponse, error) {
	rsp, err := c.ListResourceTypes(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourceTypesResponse(rsp)
}

// CreateResourceTypeWithBodyWithResponse request with arbitrary body returning *CreateResourceTypeResponse
func (c *ClientWithResponses) CreateResourceTypeWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceTypeResponse, error) {
	rsp, err := c.CreateResourceTypeWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceTypeResponse, error) {
	rsp, err := c.CreateResourceType(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceTypeResponse(rsp)
}

// DeleteResourceTypeWithResponse request returning *DeleteResourceTypeResponse
func (c *ClientWithResponses) DeleteResourceTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*DeleteResourceTypeResponse, error) {
	rsp, err := c.DeleteResourceType(ctx, orgId, typeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceTypeResponse(rsp)
}

// GetResourceTypeWithResponse request returning *GetResourceTypeResponse
func (c *ClientWithResponses) GetResourceTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, reqEditors ...RequestEditorFn) (*GetResourceTypeResponse, error) {
	rsp, err := c.GetResourceType(ctx, orgId, typeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceTypeResponse(rsp)
}

// UpdateResourceTypeWithBodyWithResponse request with arbitrary body returning *UpdateResourceTypeResponse
func (c *ClientWithResponses) UpdateResourceTypeWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceTypeResponse, error) {
	rsp, err := c.UpdateResourceTypeWithBody(ctx, orgId, typeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateResourceTypeWithResponse(ctx context.Context, orgId OrgIdPathParam, typeId ResourceTypeIdPathParam, body UpdateResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceTypeResponse, error) {
	rsp, err := c.UpdateResourceType(ctx, orgId, typeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceTypeResponse(rsp)
}

// ListRunnerRulesInOrgWithResponse request returning *ListRunnerRulesInOrgResponse
func (c *ClientWithResponses) ListRunnerRulesInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListRunnerRulesInOrgParams, reqEditors ...RequestEditorFn) (*ListRunnerRulesInOrgResponse, error) {
	rsp, err := c.ListRunnerRulesInOrg(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRunnerRulesInOrgResponse(rsp)
}

// CreateRunnerRuleInOrgWithBodyWithResponse request with arbitrary body returning *CreateRunnerRuleInOrgResponse
func (c *ClientWithResponses) CreateRunnerRuleInOrgWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunnerRuleInOrgResponse, error) {
	rsp, err := c.CreateRunnerRuleInOrgWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunnerRuleInOrgResponse(rsp)
}

func (c *ClientWithResponses) CreateRunnerRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateRunnerRuleInOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunnerRuleInOrgResponse, error) {
	rsp, err := c.CreateRunnerRuleInOrg(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunnerRuleInOrgResponse(rsp)
}

// DeleteRunnerRuleInOrgWithResponse request returning *DeleteRunnerRuleInOrgResponse
func (c *ClientWithResponses) DeleteRunnerRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*DeleteRunnerRuleInOrgResponse, error) {
	rsp, err := c.DeleteRunnerRuleInOrg(ctx, orgId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRunnerRuleInOrgResponse(rsp)
}

// GetRunnerRuleInOrgWithResponse request returning *GetRunnerRuleInOrgResponse
func (c *ClientWithResponses) GetRunnerRuleInOrgWithResponse(ctx context.Context, orgId OrgIdPathParam, ruleId RuleIdPathParam, reqEditors ...RequestEditorFn) (*GetRunnerRuleInOrgResponse, error) {
	rsp, err := c.GetRunnerRuleInOrg(ctx, orgId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunnerRuleInOrgResponse(rsp)
}

// ListRunnersWithResponse request returning *ListRunnersResponse
func (c *ClientWithResponses) ListRunnersWithResponse(ctx context.Context, orgId OrgIdPathParam, params *ListRunnersParams, reqEditors ...RequestEditorFn) (*ListRunnersResponse, error) {
	rsp, err := c.ListRunners(ctx, orgId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRunnersResponse(rsp)
}

// CreateRunnerWithBodyWithResponse request with arbitrary body returning *CreateRunnerResponse
func (c *ClientWithResponses) CreateRunnerWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRunnerResponse, error) {
	rsp, err := c.CreateRunnerWithBody(ctx, orgId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunnerResponse(rsp)
}

func (c *ClientWithResponses) CreateRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, body CreateRunnerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRunnerResponse, error) {
	rsp, err := c.CreateRunner(ctx, orgId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRunnerResponse(rsp)
}

// DeleteRunnerWithResponse request returning *DeleteRunnerResponse
func (c *ClientWithResponses) DeleteRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*DeleteRunnerResponse, error) {
	rsp, err := c.DeleteRunner(ctx, orgId, runnerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRunnerResponse(rsp)
}

// GetRunnerWithResponse request returning *GetRunnerResponse
func (c *ClientWithResponses) GetRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, reqEditors ...RequestEditorFn) (*GetRunnerResponse, error) {
	rsp, err := c.GetRunner(ctx, orgId, runnerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunnerResponse(rsp)
}

// UpdateRunnerWithBodyWithResponse request with arbitrary body returning *UpdateRunnerResponse
func (c *ClientWithResponses) UpdateRunnerWithBodyWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRunnerResponse, error) {
	rsp, err := c.UpdateRunnerWithBody(ctx, orgId, runnerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRunnerResponse(rsp)
}

func (c *ClientWithResponses) UpdateRunnerWithResponse(ctx context.Context, orgId OrgIdPathParam, runnerId RunnerIdPathParam, body UpdateRunnerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRunnerResponse, error) {
	rsp, err := c.UpdateRunner(ctx, orgId, runnerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRunnerResponse(rsp)
}

// ParseListInternalOrganizationsResponse parses an HTTP response from a ListInternalOrganizationsWithResponse call
func ParseListInternalOrganizationsResponse(rsp *http.Response) (*ListInternalOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInternalOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InternalOrganizationPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateInternalOrganizationResponse parses an HTTP response from a CreateInternalOrganizationWithResponse call
func ParseCreateInternalOrganizationResponse(rsp *http.Response) (*CreateInternalOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInternalOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InternalOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetInternalOrganizationResponse parses an HTTP response from a GetInternalOrganizationWithResponse call
func ParseGetInternalOrganizationResponse(rsp *http.Response) (*GetInternalOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInternalOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InternalOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseInternalUpdateEnvironmentResponse parses an HTTP response from a InternalUpdateEnvironmentWithResponse call
func ParseInternalUpdateEnvironmentResponse(rsp *http.Response) (*InternalUpdateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalUpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGenerateInternalModuleCatalogueResponse parses an HTTP response from a GenerateInternalModuleCatalogueWithResponse call
func ParseGenerateInternalModuleCatalogueResponse(rsp *http.Response) (*GenerateInternalModuleCatalogueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateInternalModuleCatalogueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InternalModuleCatalogue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetInternalRunnerResponse parses an HTTP response from a GetInternalRunnerWithResponse call
func ParseGetInternalRunnerResponse(rsp *http.Response) (*GetInternalRunnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInternalRunnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InternalRunner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseInternalListResourceTypesResponse parses an HTTP response from a InternalListResourceTypesWithResponse call
func ParseInternalListResourceTypesResponse(rsp *http.Response) (*InternalListResourceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalListResourceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceTypePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInternalCreateResourceTypeResponse parses an HTTP response from a InternalCreateResourceTypeWithResponse call
func ParseInternalCreateResourceTypeResponse(rsp *http.Response) (*InternalCreateResourceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalCreateResourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ResourceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseInternalDeleteResourceTypeResponse parses an HTTP response from a InternalDeleteResourceTypeWithResponse call
func ParseInternalDeleteResourceTypeResponse(rsp *http.Response) (*InternalDeleteResourceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalDeleteResourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseInternalUpdateResourceTypeResponse parses an HTTP response from a InternalUpdateResourceTypeWithResponse call
func ParseInternalUpdateResourceTypeResponse(rsp *http.Response) (*InternalUpdateResourceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InternalUpdateResourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListEnvironmentTypesResponse parses an HTTP response from a ListEnvironmentTypesWithResponse call
func ParseListEnvironmentTypesResponse(rsp *http.Response) (*ListEnvironmentTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentTypePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentTypeResponse parses an HTTP response from a CreateEnvironmentTypeWithResponse call
func ParseCreateEnvironmentTypeResponse(rsp *http.Response) (*CreateEnvironmentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EnvironmentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentTypeResponse parses an HTTP response from a DeleteEnvironmentTypeWithResponse call
func ParseDeleteEnvironmentTypeResponse(rsp *http.Response) (*DeleteEnvironmentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentTypeResponse parses an HTTP response from a GetEnvironmentTypeWithResponse call
func ParseGetEnvironmentTypeResponse(rsp *http.Response) (*GetEnvironmentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListModuleProvidersResponse parses an HTTP response from a ListModuleProvidersWithResponse call
func ParseListModuleProvidersResponse(rsp *http.Response) (*ListModuleProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModuleProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModuleProviderPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateModuleProviderResponse parses an HTTP response from a CreateModuleProviderWithResponse call
func ParseCreateModuleProviderResponse(rsp *http.Response) (*CreateModuleProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateModuleProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ModuleProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteModuleProviderResponse parses an HTTP response from a DeleteModuleProviderWithResponse call
func ParseDeleteModuleProviderResponse(rsp *http.Response) (*DeleteModuleProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModuleProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetModuleProviderResponse parses an HTTP response from a GetModuleProviderWithResponse call
func ParseGetModuleProviderResponse(rsp *http.Response) (*GetModuleProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModuleProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModuleProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateModuleProviderResponse parses an HTTP response from a UpdateModuleProviderWithResponse call
func ParseUpdateModuleProviderResponse(rsp *http.Response) (*UpdateModuleProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateModuleProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModuleProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListModuleRulesInOrgResponse parses an HTTP response from a ListModuleRulesInOrgWithResponse call
func ParseListModuleRulesInOrgResponse(rsp *http.Response) (*ListModuleRulesInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModuleRulesInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RulePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateModuleRuleInOrgResponse parses an HTTP response from a CreateModuleRuleInOrgWithResponse call
func ParseCreateModuleRuleInOrgResponse(rsp *http.Response) (*CreateModuleRuleInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateModuleRuleInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteModuleRuleInOrgResponse parses an HTTP response from a DeleteModuleRuleInOrgWithResponse call
func ParseDeleteModuleRuleInOrgResponse(rsp *http.Response) (*DeleteModuleRuleInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModuleRuleInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetModuleRuleInOrgResponse parses an HTTP response from a GetModuleRuleInOrgWithResponse call
func ParseGetModuleRuleInOrgResponse(rsp *http.Response) (*GetModuleRuleInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModuleRuleInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListModulesResponse parses an HTTP response from a ListModulesWithResponse call
func ParseListModulesResponse(rsp *http.Response) (*ListModulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModulePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateModuleResponse parses an HTTP response from a CreateModuleWithResponse call
func ParseCreateModuleResponse(rsp *http.Response) (*CreateModuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateModuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Module
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteModuleResponse parses an HTTP response from a DeleteModuleWithResponse call
func ParseDeleteModuleResponse(rsp *http.Response) (*DeleteModuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteModuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetModuleResponse parses an HTTP response from a GetModuleWithResponse call
func ParseGetModuleResponse(rsp *http.Response) (*GetModuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Module
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateModuleResponse parses an HTTP response from a UpdateModuleWithResponse call
func ParseUpdateModuleResponse(rsp *http.Response) (*UpdateModuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateModuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Module
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListProjectsResponse parses an HTTP response from a ListProjectsWithResponse call
func ParseListProjectsResponse(rsp *http.Response) (*ListProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateProjectResponse parses an HTTP response from a CreateProjectWithResponse call
func ParseCreateProjectResponse(rsp *http.Response) (*CreateProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteProjectResponse parses an HTTP response from a DeleteProjectWithResponse call
func ParseDeleteProjectResponse(rsp *http.Response) (*DeleteProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetProjectResponse parses an HTTP response from a GetProjectWithResponse call
func ParseGetProjectResponse(rsp *http.Response) (*GetProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListEnvironmentsResponse parses an HTTP response from a ListEnvironmentsWithResponse call
func ParseListEnvironmentsResponse(rsp *http.Response) (*ListEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseForceDeleteEnvironmentResponse parses an HTTP response from a ForceDeleteEnvironmentWithResponse call
func ParseForceDeleteEnvironmentResponse(rsp *http.Response) (*ForceDeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ForceDeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUpdateRunnerInAnEnvironmentResponse parses an HTTP response from a UpdateRunnerInAnEnvironmentWithResponse call
func ParseUpdateRunnerInAnEnvironmentResponse(rsp *http.Response) (*UpdateRunnerInAnEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRunnerInAnEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefreshRunnerActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseListAvailableResourceTypesResponse parses an HTTP response from a ListAvailableResourceTypesWithResponse call
func ParseListAvailableResourceTypesResponse(rsp *http.Response) (*ListAvailableResourceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailableResourceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AvailableResourceTypePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListResourceTypesResponse parses an HTTP response from a ListResourceTypesWithResponse call
func ParseListResourceTypesResponse(rsp *http.Response) (*ListResourceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceTypePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateResourceTypeResponse parses an HTTP response from a CreateResourceTypeWithResponse call
func ParseCreateResourceTypeResponse(rsp *http.Response) (*CreateResourceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ResourceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteResourceTypeResponse parses an HTTP response from a DeleteResourceTypeWithResponse call
func ParseDeleteResourceTypeResponse(rsp *http.Response) (*DeleteResourceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetResourceTypeResponse parses an HTTP response from a GetResourceTypeWithResponse call
func ParseGetResourceTypeResponse(rsp *http.Response) (*GetResourceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateResourceTypeResponse parses an HTTP response from a UpdateResourceTypeWithResponse call
func ParseUpdateResourceTypeResponse(rsp *http.Response) (*UpdateResourceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListRunnerRulesInOrgResponse parses an HTTP response from a ListRunnerRulesInOrgWithResponse call
func ParseListRunnerRulesInOrgResponse(rsp *http.Response) (*ListRunnerRulesInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRunnerRulesInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RunnerRulePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateRunnerRuleInOrgResponse parses an HTTP response from a CreateRunnerRuleInOrgWithResponse call
func ParseCreateRunnerRuleInOrgResponse(rsp *http.Response) (*CreateRunnerRuleInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRunnerRuleInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RunnerRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteRunnerRuleInOrgResponse parses an HTTP response from a DeleteRunnerRuleInOrgWithResponse call
func ParseDeleteRunnerRuleInOrgResponse(rsp *http.Response) (*DeleteRunnerRuleInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRunnerRuleInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetRunnerRuleInOrgResponse parses an HTTP response from a GetRunnerRuleInOrgWithResponse call
func ParseGetRunnerRuleInOrgResponse(rsp *http.Response) (*GetRunnerRuleInOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunnerRuleInOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RunnerRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListRunnersResponse parses an HTTP response from a ListRunnersWithResponse call
func ParseListRunnersResponse(rsp *http.Response) (*ListRunnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRunnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RunnerPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateRunnerResponse parses an HTTP response from a CreateRunnerWithResponse call
func ParseCreateRunnerResponse(rsp *http.Response) (*CreateRunnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRunnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Runner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteRunnerResponse parses an HTTP response from a DeleteRunnerWithResponse call
func ParseDeleteRunnerResponse(rsp *http.Response) (*DeleteRunnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRunnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetRunnerResponse parses an HTTP response from a GetRunnerWithResponse call
func ParseGetRunnerResponse(rsp *http.Response) (*GetRunnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Runner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRunnerResponse parses an HTTP response from a UpdateRunnerWithResponse call
func ParseUpdateRunnerResponse(rsp *http.Response) (*UpdateRunnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRunnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Runner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}
